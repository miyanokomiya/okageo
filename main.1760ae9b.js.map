{"version":3,"sources":["../src/geo.ts","../src/svg.ts","main.ts"],"names":[],"mappings":"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","file":"main.1760ae9b.js","sourceRoot":"../demo","sourcesContent":["import { IVec2, IRectangle, AffineMatrix } from './types'\n\nexport const MINVALUE: number = 0.000001\n\nexport const IDENTITY_AFFINE: AffineMatrix = [1, 0, 0, 1, 0, 0]\n\nexport function vec(x: number, y: number): IVec2 {\n  return { x, y }\n}\n\nexport function add(a: IVec2, b: IVec2): IVec2 {\n  return vec(a.x + b.x, a.y + b.y)\n}\n\nexport function sub(a: IVec2, b: IVec2): IVec2 {\n  return vec(a.x - b.x, a.y - b.y)\n}\n\nexport function multi(a: IVec2, b: number): IVec2 {\n  return vec(a.x * b, a.y * b)\n}\n\nexport function isSame(a: IVec2, b: IVec2): boolean {\n  const dif: IVec2 = sub(a, b)\n  return Math.abs(dif.x) < MINVALUE && Math.abs(dif.y) < MINVALUE\n}\n\nexport function getDistance(a: IVec2, b: IVec2): number {\n  return getNorm(sub(a, b))\n}\n\nexport function getPolylineLength(polyline: IVec2[], closed = false): number {\n  if (polyline.length < 2) return 0\n\n  let ret = 0\n  for (let i = 0; i < polyline.length - 1; i++) {\n    ret += getDistance(polyline[i], polyline[i + 1])\n  }\n  if (closed) {\n    ret += getDistance(polyline[polyline.length - 1], polyline[0])\n  }\n  return ret\n}\n\nexport function getNorm(a: IVec2): number {\n  return Math.sqrt(a.x * a.x + a.y * a.y)\n}\n\nexport function isZero(a: IVec2): boolean {\n  return getNorm(a) < MINVALUE\n}\n\nexport function getUnit(a: IVec2): IVec2 {\n  const d = getNorm(a)\n  if (d < MINVALUE) throw new Error('cannot get unit vector of zero vector')\n  return multi(a, 1 / d)\n}\n\nexport function getCross(a: IVec2, b: IVec2): number {\n  return a.x * b.y - a.y * b.x\n}\n\nexport function getInner(a: IVec2, b: IVec2): number {\n  return a.x * b.x + a.y * b.y\n}\n\nexport function cloneVectors(vectors: IVec2[]): IVec2[] {\n  return vectors.map((v) => ({ ...v }))\n}\n\nexport function getCenter(a: IVec2, b: IVec2): IVec2 {\n  return multi(add(a, b), 1 / 2)\n}\n\nexport function getRectCenter(rec: IRectangle): IVec2 {\n  return vec(rec.x + rec.width / 2, rec.y + rec.height / 2)\n}\n\nexport function getPolygonCenter(polygon: IVec2[]): IVec2 {\n  if (polygon.length === 0) return vec(0, 0)\n\n  return multi(\n    polygon.reduce((p, c) => add(p, c), vec(0, 0)),\n    1 / polygon.length\n  )\n}\n\nexport function getRadian(a: IVec2, from: IVec2 = vec(0, 0)): number {\n  const dif = sub(a, from)\n  return Math.atan2(dif.y, dif.x)\n}\n\n/**\n * fromに対して、aと点対称なベクトル取得\n * @param a 対象ベクトル\n * @param from 基点\n * @param 点対称ベクトル\n */\nexport function getSymmetry(a: IVec2, from: IVec2 = vec(0, 0)): IVec2 {\n  return add(multi(sub(from, a), 2), a)\n}\n\n/**\n * fromに対して、aからradian回転したベクトル取得\n * @param a 対象ベクトル\n * @param radian 回転ラジアン\n * @param from 基点\n * @param 回転後のベクトル\n */\nexport function rotate(\n  a: IVec2,\n  radian: number,\n  from: IVec2 = vec(0, 0)\n): IVec2 {\n  const fromBase = sub(a, from)\n  const s = Math.sin(radian)\n  const c = Math.cos(radian)\n  return add(\n    vec(c * fromBase.x - s * fromBase.y, s * fromBase.x + c * fromBase.y),\n    from\n  )\n}\n\nfunction getRotateFn(\n  radian: number,\n  from: IVec2 = vec(0, 0)\n): (a: IVec2, reverse?: boolean) => IVec2 {\n  const s = Math.sin(radian)\n  const c = Math.cos(radian)\n  return (a, reverse) => {\n    const fromBase = sub(a, from)\n    return reverse\n      ? add(\n          vec(\n            c * fromBase.x + s * fromBase.y,\n            -s * fromBase.x + c * fromBase.y\n          ),\n          from\n        )\n      : add(\n          vec(c * fromBase.x - s * fromBase.y, s * fromBase.x + c * fromBase.y),\n          from\n        )\n  }\n}\n\n/**\n * 2次方程式の解の公式\n * a * x^2 + b * x + c = 0\n * 解に虚数が含まれる場合は解なし扱い\n * @param a x^2の係数\n * @param b xの係数\n * @param c 定数\n * @return 解の配列\n */\nexport function solveEquationOrder2(a: number, b: number, c: number): number[] {\n  if (isCloseToZero(a)) {\n    return isCloseToZero(b) ? [] : [-c / b]\n  }\n\n  const d = b * b - 4 * a * c\n  if (d < 0) {\n    return []\n  }\n\n  const ia = 0.5 / a\n\n  if (isCloseToZero(d)) {\n    return [-b * ia]\n  }\n\n  const sd = Math.sqrt(d)\n  return [(-b + sd) * ia, (-b - sd) * ia]\n}\n\n/**\n * 点から直線への垂線の足\n * @param p 対象の点\n * @param line 直線\n * @return 垂線の足\n */\nexport function getPedal(p: IVec2, line: IVec2[]): IVec2 {\n  if (line.length !== 2) throw new Error('line must be length = 2')\n  const s = line[0]\n  const t = line[1]\n  const vecST = sub(t, s)\n  const vecSP = sub(p, s)\n  const inner = getInner(vecST, vecSP)\n  const rate = inner / getInner(vecST, vecST)\n  return add(s, multi(vecST, rate))\n}\n\n/**\n * 2次ベジェ曲線と直線の当たり判定用パラメータを取得する\n * @param p0 ベジェ曲線始点\n * @param p1 ベジェ曲線制御点\n * @param p2 ベジェ曲線終点\n * @param p 直線始点\n * @param q 直線終点\n * @return ベジェ曲線パラメータ配列\n */\nfunction rayToBezier(\n  p0: IVec2,\n  p1: IVec2,\n  p2: IVec2,\n  p: IVec2,\n  q: IVec2\n): number[] {\n  const vx: number = q.x - p.x\n  const vy: number = q.y - p.y\n  const a: number = p0.x - 2 * p1.x + p2.x\n  const b: number = 2 * (p1.x - p0.x)\n  const c: number = p0.x\n  const d: number = p0.y - 2 * p1.y + p2.y\n  const e: number = 2 * (p1.y - p0.y)\n  const f: number = p0.y\n\n  return solveEquationOrder2(\n    a * vy - vx * d,\n    b * vy - vx * e,\n    vy * c - vy * p.x - vx * f + vx * p.y\n  )\n}\n\n/**\n * 2次ベジェ曲「線分」と「直線」の交点を取得する\n * @method crossLineAndBezier\n * @param p0 ベジェ曲線始点\n * @param p1 ベジェ曲線制御点\n * @param p2 ベジェ曲線終点\n * @param p 直線始点\n * @param q 直線終点\n * @return 交点リスト\n */\nexport function getCrossLineAndBezier(\n  p0: IVec2,\n  p1: IVec2,\n  p2: IVec2,\n  p: IVec2,\n  q: IVec2\n) {\n  return rayToBezier(p0, p1, p2, p, q)\n    .filter((t) => 0 <= t && t <= 1)\n    .map((t) =>\n      vec(\n        (p2.x - 2 * p1.x + p0.x) * t * t + 2 * (p1.x - p0.x) * t + p0.x,\n        (p2.y - 2 * p1.y + p0.y) * t * t + 2 * (p1.y - p0.y) * t + p0.y\n      )\n    )\n}\n\n/**\n * 線分と線分の交差判定（端点での接触は含まない）\n * @param seg1 線分1\n * @param seg2 線分2\n * @return 交差しているフラグ\n */\nexport function isCrossSegAndSeg(seg1: IVec2[], seg2: IVec2[]): boolean {\n  const { ta, tb, tc, td } = getCrossSegAndSegParams(seg1, seg2)\n  return tc * td < 0 && ta * tb < 0\n}\n\n/**\n * 線分と線分の接触判定（端点での接触含む）\n * @param seg1 線分1\n * @param seg2 線分2\n * @return 接触しているフラグ\n */\nexport function isTouchSegAndSeg(seg1: IVec2[], seg2: IVec2[]): boolean {\n  const { ta, tb, tc, td } = getCrossSegAndSegParams(seg1, seg2)\n  return tc * td <= 0 && ta * tb <= 0\n}\n\nfunction getCrossSegAndSegParams(\n  seg1: IVec2[],\n  seg2: IVec2[]\n): {\n  ta: number\n  tb: number\n  tc: number\n  td: number\n} {\n  const ax = seg1[0].x\n  const ay = seg1[0].y\n  const bx = seg1[1].x\n  const by = seg1[1].y\n  const cx = seg2[0].x\n  const cy = seg2[0].y\n  const dx = seg2[1].x\n  const dy = seg2[1].y\n  const ta = (cx - dx) * (ay - cy) + (cy - dy) * (cx - ax)\n  const tb = (cx - dx) * (by - cy) + (cy - dy) * (cx - bx)\n  const tc = (ax - bx) * (cy - ay) + (ay - by) * (ax - cx)\n  const td = (ax - bx) * (dy - ay) + (ay - by) * (ax - dx)\n  return { ta, tb, tc, td }\n}\n\n/**\n * 平行判定\n * @param a ベクトル or 2点の配列\n * @param b 同上\n * @return 平行であるフラグ\n */\nexport function isParallel(a: IVec2, b: IVec2): boolean {\n  const cross = getCross(a, b)\n  return Math.abs(cross) < MINVALUE\n}\n\n/**\n * 点が直線上にあるか判定\n * @param p 点\n * @param line 直線\n * @return 直線上にあるフラグ\n */\nexport function isOnLine(p: IVec2, line: IVec2[]): boolean {\n  return isZero(sub(p, getPedal(p, line)))\n}\n\n/**\n * 点が線分上にあるか判定\n * @param p 点\n * @param seg 線分\n * @return 線分上にあるフラグ\n */\nexport function isOnSeg(p: IVec2, seg: IVec2[]): boolean {\n  if (!isZero(sub(p, getPedal(p, seg)))) return false\n  const v1 = sub(seg[1], seg[0])\n  const v2 = sub(p, seg[0])\n  if (getInner(v1, v2) < 0) return false\n  if (getNorm(v1) < getNorm(v2)) return false\n  return true\n}\n\n/**\n * 点から正の方向へ伸ばした水平線が線分と交差するか判定\n * 点が面上にあるか判定に利用する\n * 点が線分上の場合はfalse\n * @param p 点\n * @param seg 線分\n * @return 交差するフラグ\n */\nfunction isCrossSegAndRightHorizon(p: IVec2, seg: IVec2[]): boolean {\n  // 平行な場合はfalse\n  if (Math.abs(seg[0].y - seg[1].y) < MINVALUE) {\n    return false\n  }\n\n  // 線分の上側端点との接触はfalse、下側端点との接触はtrueで統一\n  let top, bottom\n  if (seg[0].y < seg[1].y) {\n    ;[bottom, top] = seg\n  } else {\n    ;[top, bottom] = seg\n  }\n  if (p.y < bottom.y || top.y <= p.y) {\n    return false\n  }\n\n  // 交点は厳密にpの右側でなければいけない\n  const cross = getCrossSegAndLine(seg, [p, vec(p.x + 1, p.y)])\n  if (!cross || cross.x <= p.x) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * 点が面上にあるか判定（境界線上を含む）\n * @param p 点\n * @param polygon 面\n * @return 面上にあるフラグ\n */\nexport function isOnPolygon(p: IVec2, polygon: IVec2[]): boolean {\n  // 頂点上判定\n  if (polygon.find((point) => p.x === point.x && p.y === point.y)) return true\n\n  const segs: IVec2[][] = polygon\n    .map((point, i) => {\n      return [point, i < polygon.length - 1 ? polygon[i + 1] : polygon[0]]\n    })\n    // 長さ0の辺は扱わない\n    .filter((seg) => !isSame(seg[0], seg[1]))\n\n  // 辺上判定\n  for (let i = 0; i < segs.length; i++) {\n    const seg = segs[i]\n    if (isOnSeg(p, seg)) {\n      return true\n    }\n  }\n\n  const hitSegs = segs.filter((seg) => isCrossSegAndRightHorizon(p, seg))\n  return hitSegs.length % 2 === 1\n}\n\n/**\n * 線分と直線の交点取得\n * @param seg 線分\n * @param line 直線\n * @return 交点\n */\nexport function getCrossSegAndLine(seg: IVec2[], line: IVec2[]): IVec2 | null {\n  if (isParallel(sub(seg[0], seg[1]), sub(line[0], line[1]))) return null\n  if (isOnLine(seg[0], line)) return { ...seg[0] }\n  if (isOnLine(seg[1], line)) return { ...seg[1] }\n\n  const s1 =\n    ((line[1].x - line[0].x) * (seg[0].y - line[0].y) -\n      (line[1].y - line[0].y) * (seg[0].x - line[0].x)) /\n    2\n  const s2 =\n    ((line[1].x - line[0].x) * (line[0].y - seg[1].y) -\n      (line[1].y - line[0].y) * (line[0].x - seg[1].x)) /\n    2\n  const rate = s1 / (s1 + s2)\n  const isExistCorss = 0 < rate && rate < 1\n\n  return isExistCorss\n    ? vec(\n        seg[0].x + (seg[1].x - seg[0].x) * rate,\n        seg[0].y + (seg[1].y - seg[0].y) * rate\n      )\n    : null\n}\n\n/**\n * 同一線分かを判定する\n * @param ab 線分ab\n * @param cd 線分cd\n * @return 同一であるフラグ\n */\nexport function isSameSeg(ab: IVec2[], cd: IVec2[]): boolean {\n  if (isSame(ab[0], cd[0]) && isSame(ab[1], cd[1])) return true\n  if (isSame(ab[0], cd[1]) && isSame(ab[1], cd[0])) return true\n  return false\n}\n\n/**\n * ポリゴンを直線で分割する\n * @param pol 面\n * @param line 直線\n * @return 分割された点配列の配列\n */\nexport function splitPolyByLine(pol: IVec2[], line: IVec2[]): IVec2[][] {\n  let points: IVec2[] = []\n  let crossIndex: number[] = []\n  let crossList: IVec2[] = []\n\n  pol.forEach((p, i) => {\n    const targetLine = [p, pol[(i + 1) % pol.length]]\n    const cross = getCrossSegAndLine(targetLine, line)\n    points.push(p)\n    if (cross) {\n      points.push(cross)\n      crossIndex.push(i + 1 + crossIndex.length)\n      crossList.push(cross)\n    }\n  })\n\n  if (crossIndex.length % 2 !== 0) return []\n\n  // 近い順に並べる -> 直線をx軸と重なるよう回転してx座標で比較\n  const rad: number = getRadian(line[0], line[1])\n  crossList.sort((a, b) => rotate(a, -rad).x - rotate(b, -rad).x)\n\n  // 面の辺と同一ではないものを採用\n  let targetSection: IVec2[] = []\n  for (let k = 0; k < crossList.length - 1; k += 2) {\n    const section = [crossList[k], crossList[k + 1]]\n    let sameSeg = false\n    for (let l = 0; l < pol.length; l++) {\n      if (isSameSeg(section, [pol[l], pol[(l + 1) % pol.length]])) {\n        sameSeg = true\n        break\n      }\n    }\n\n    if (!sameSeg) {\n      targetSection = section\n      break\n    }\n  }\n\n  if (targetSection.length !== 2) return []\n\n  // 除外対象回収\n  const dropList = crossList.concat()\n  let tmpIndex = dropList.indexOf(targetSection[0])\n  if (tmpIndex !== -1) {\n    dropList.splice(tmpIndex, 1)\n  }\n  tmpIndex = dropList.indexOf(targetSection[1])\n  if (tmpIndex !== -1) {\n    dropList.splice(tmpIndex, 1)\n  }\n  const tmpList = points.concat()\n  dropList.forEach((p) => {\n    const i = tmpList.indexOf(p)\n    tmpList.splice(i, 1)\n  })\n\n  points = tmpList\n  crossList = targetSection\n\n  const i0 = points.indexOf(crossList[0])\n  const i1 = points.indexOf(crossList[1])\n\n  if (i0 === -1 || i1 === -1) return []\n\n  crossIndex = []\n  crossIndex[0] = Math.min(i0, i1)\n  crossIndex[1] = Math.max(i0, i1)\n\n  // 分割ポリゴンを拾い集める\n  const splitedPolygons = []\n\n  // 1つ目\n  let splitPol = []\n  // 交点まで追加\n  for (let i = 0; i <= crossIndex[0]; i++) {\n    splitPol.push(vec(points[i].x, points[i].y))\n  }\n  // 交点から追加\n  for (let i = crossIndex[1]; i < points.length; i++) {\n    splitPol.push(vec(points[i].x, points[i].y))\n  }\n  // 確定\n  splitedPolygons.push(splitPol)\n\n  // 2つ目\n  splitPol = []\n  // 交点から交点まで追加\n  for (let i = crossIndex[0]; i <= crossIndex[1]; i++) {\n    splitPol.push(vec(points[i].x, points[i].y))\n  }\n  // 確定\n  splitedPolygons.push(splitPol)\n\n  // 再帰的に分割\n  const recursiveResult: IVec2[][] = []\n  splitedPolygons.forEach((polygon) => {\n    const splited = splitPolyByLine(polygon, line)\n    if (splited.length === 0) {\n      recursiveResult.push(polygon)\n    } else {\n      recursiveResult.push(...splited)\n    }\n  })\n\n  return recursiveResult\n}\n\n/**\n * 三角分割\n * @param polygon 面\n * @return 分割面リスト\n */\nexport function triangleSplit(polygon: IVec2[]): IVec2[][] {\n  // 時計周りに揃える\n  polygon = convertLoopwise(polygon)\n\n  // ポリゴン複製\n  const targetPoly = omitSamePoint(polygon)\n\n  // 最遠点のインデックス\n  let farthestIndex = 0\n  // 現在の最遠点と前後点で作った三角形の外積\n  let currentCross = 0\n  // 分割後の面リスト\n  const triangleList = []\n\n  // ループ\n  while (targetPoly.length >= 3) {\n    // 最遠点インデックス取得\n    const sorted = targetPoly.concat()\n    sorted.sort((a, b) => {\n      return getNorm(b) - getNorm(a)\n    })\n    farthestIndex = targetPoly.indexOf(sorted[0])\n\n    // 分割実行\n    let tri = getTriangle(targetPoly, farthestIndex)\n    if (!tri) {\n      // 最遠点では失敗\n      const size = targetPoly.length\n      // 外積計算\n      const pa = sub(\n        targetPoly[(farthestIndex + 1) % size],\n        targetPoly[farthestIndex]\n      )\n      const pb = sub(\n        targetPoly[farthestIndex - 1 < 0 ? size - 1 : farthestIndex - 1],\n        targetPoly[farthestIndex]\n      )\n\n      currentCross = getCross(pa, pb)\n\n      let index = farthestIndex\n      // 最遠点以外で探す\n      while (!tri) {\n        index = (index + 1) % size\n        // 最遠点の外積と同じ符号かを判定\n        const v1 = sub(targetPoly[(index + 1) % size], targetPoly[index])\n        const v2 = sub(\n          targetPoly[index - 1 < 0 ? size - 1 : index - 1],\n          targetPoly[index]\n        )\n        const tmpCross = getCross(v1, v2)\n        if (tmpCross * currentCross > 0) {\n          // 判定続行\n          tri = getTriangle(targetPoly, index)\n        }\n        if (index === farthestIndex) {\n          throw new Error('failed to split triangles')\n        }\n      }\n\n      // 採用された点を削除\n      targetPoly.splice(index, 1)\n    } else {\n      // 最遠点削除\n      targetPoly.splice(farthestIndex, 1)\n    }\n    triangleList.push(tri)\n  }\n  return triangleList\n}\n\n/**\n * 面から三角形を取得する\n * @param polygon 面\n * @param index このインデックスの点とその両側の点で三角形を作る\n * @return 三角形、内部に入り込む点がある場合はnull\n */\nfunction getTriangle(polygon: IVec2[], index: number): IVec2[] | null {\n  // indexとその前後点で三角形作成\n  const size = polygon.length\n  const p0 = polygon[index]\n  const p1 = polygon[(index + 1) % size]\n  const p2 = polygon[index - 1 < 0 ? size - 1 : index - 1]\n\n  const tri: IVec2[] = [p0, p1, p2]\n\n  // 内部に点が入り込まないか判定\n  let invalid: boolean = false\n  polygon.some((p) => {\n    if (p !== p0 && p !== p1 && p !== p2) {\n      if (isPointOnTriangle(tri, p)) {\n        // 失敗\n        invalid = true\n      }\n    }\n    return invalid\n  })\n\n  return invalid ? null : tri\n}\n\n/**\n * 点が三角形内にあるかを判定する\n * 境界も含む\n * @param tri 三角形\n * @param p 点\n * @return 内部にあるフラグ\n */\nexport function isPointOnTriangle(tri: IVec2[], p: IVec2): boolean {\n  // 三角形の3つのベクトル\n  const ab = sub(tri[1], tri[0])\n  const bc = sub(tri[2], tri[1])\n  const ca = sub(tri[0], tri[2])\n\n  // 三角形の各点からpへのベクトル\n  const ap = sub(p, tri[0])\n  const bp = sub(p, tri[1])\n  const cp = sub(p, tri[2])\n\n  // 外積を求める\n  const crossABP = getCross(ab, bp)\n  const crossBCP = getCross(bc, cp)\n  const crossCAP = getCross(ca, ap)\n\n  // 外積の符号が全て同じなら内部にある\n  // 0も含む→境界も含む\n  if (\n    (crossABP >= 0 && crossBCP >= 0 && crossCAP >= 0) ||\n    (crossABP <= 0 && crossBCP <= 0 && crossCAP <= 0)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * 面を時計回りに変換する\n * @param {vector[]} 面\n * @return 時計回りにした面(引数とは別配列にする)\n */\nexport function convertLoopwise(polygon: IVec2[]): IVec2[] {\n  const ret = polygon.concat()\n  if (getLoopwise(polygon) === -1) {\n    ret.reverse()\n  }\n  return ret\n}\n\n/**\n * 面の座標が時計回りかを判定する\n * @param polygon 面\n * @return -1:反時計 0:不定 1:時計\n */\nexport function getLoopwise(polygon: IVec2[]): number {\n  const area = getArea(polygon, true)\n  if (area > 0) return 1\n  if (area < 0) return -1\n  return 0\n}\n\n/**\n * 面積取得\n * @param polygon 面\n * @param allowNegative 負値を許すフラグ\n * @return 面積\n */\nexport function getArea(\n  polygon: IVec2[],\n  allowNegative: boolean = false\n): number {\n  if (polygon.length < 3) return 0\n\n  let area = 0\n  const size = polygon.length\n  for (let i = 0; i < size - 1; i++) {\n    area +=\n      (polygon[i].x - polygon[i + 1].x) * (polygon[i].y + polygon[i + 1].y)\n  }\n  // 最後分\n  area +=\n    (polygon[size - 1].x - polygon[0].x) * (polygon[size - 1].y + polygon[0].y)\n\n  area /= 2\n\n  // 負値を許さないなら絶対値\n  if (!allowNegative) {\n    area = Math.abs(area)\n  }\n\n  return area\n}\n\n/**\n * ベジェ曲線を直線で近似する(３次まで対応)\n * @param pointList 制御点リスト\n * @param size 分割数(1なら制御点両端のみ)\n * @return 座標リスト\n */\nexport function approximateBezier(pointList: IVec2[], size: number): IVec2[] {\n  const ret: IVec2[] = []\n  const unitT: number = 1 / size\n\n  if (pointList.length === 3) {\n    // ２次ベジェの場合\n    for (let i = 0; i <= size; i++) {\n      ret.push(getPointOnBezier2(pointList as [IVec2, IVec2, IVec2], unitT * i))\n    }\n  } else if (pointList.length === 4) {\n    // 3次ベジェの場合\n    for (let i = 0; i <= size; i++) {\n      ret.push(\n        getPointOnBezier3(pointList as [IVec2, IVec2, IVec2, IVec2], unitT * i)\n      )\n    }\n  } else {\n    throw new Error('connot approximate')\n  }\n\n  return ret\n}\n\n/**\n * get point with the rate on bezier2\n * @param pointList controller points\n * @param rate rate between start point and end point\n * @return calced point\n */\nexport function getPointOnBezier2(\n  pointList: Readonly<[IVec2, IVec2, IVec2]>,\n  rate: number\n): IVec2 {\n  const t = rate\n  const nt = 1 - t\n  const c0 = multi(pointList[0], nt * nt)\n  const c1 = multi(pointList[1], 2 * t * nt)\n  const c2 = multi(pointList[2], t * t)\n  return vec(c0.x + c1.x + c2.x, c0.y + c1.y + c2.y)\n}\n\nexport function getBezier2LerpFn(\n  pointList: Readonly<[IVec2, IVec2, IVec2]>\n): (t: number) => IVec2 {\n  return (t) => getPointOnBezier2(pointList, t)\n}\n\n/**\n * get point with the rate on bezier3\n * @param pointList controller points\n * @param rate rate between start point and end point\n * @return calced point\n */\nexport function getPointOnBezier3(\n  pointList: Readonly<[IVec2, IVec2, IVec2, IVec2]>,\n  rate: number\n): IVec2 {\n  const t = rate\n  const nt = 1 - t\n  const c0 = multi(pointList[0], nt * nt * nt)\n  const c1 = multi(pointList[1], 3 * t * nt * nt)\n  const c2 = multi(pointList[2], 3 * t * t * nt)\n  const c3 = multi(pointList[3], t * t * t)\n  return vec(c0.x + c1.x + c2.x + c3.x, c0.y + c1.y + c2.y + c3.y)\n}\n\nexport function getBezier3LerpFn(\n  pointList: Readonly<[IVec2, IVec2, IVec2, IVec2]>\n): (t: number) => IVec2 {\n  return (t) => getPointOnBezier3(pointList, t)\n}\n\n/**\n * get point with the rate on bezier3\n * need these conditions to get unique value\n * p0.x <= p1.x <= p3.x\n * p0.x <= p2.x <= p3.x\n * or may cause unexpected NaN\n * @param pointList controller points [p0, p1, p2, p3]\n * @param rate rate between start point and end point\n * @return calced point\n */\nexport function getYOnBezier3AtX(\n  pointList: Readonly<[IVec2, IVec2, IVec2, IVec2]>,\n  x: number\n): number {\n  const [p0, p1, p2, p3] = pointList\n  const a = -p0.x + 3 * p1.x - 3 * p2.x + p3.x\n  const b = 3 * p0.x - 6 * p1.x + 3 * p2.x\n  const c = -3 * p0.x + 3 * p1.x\n  const d = p0.x - x\n\n  const t = solveBezier3Fomula(a, b, c, d)\n  const tt = t * t\n  const ttt = tt * t\n  const tm = 1 - t\n  const tmtm = tm * tm\n  const tmtmtm = tmtm * tm\n\n  return tmtmtm * p0.y + 3 * t * tmtm * p1.y + 3 * tt * tm * p2.y + ttt * p3.y\n}\n\n/**\n * 円弧を直線で近似する\n * @param rx x軸半径\n * @param ry y軸半径\n * @param startRadian 開始ラジアン\n * @param endRadian 終了ラジアン\n * @param center 中心座標\n * @param radian 傾き\n * @param size 分割数\n * @return 座標リスト\n */\nexport function approximateArc(\n  rx: number,\n  ry: number,\n  startRadian: number,\n  endRadian: number,\n  center: IVec2,\n  radian: number,\n  size: number\n): IVec2[] {\n  const ret = []\n  const range = endRadian - startRadian\n  const unitT = range / size\n  const rotateFn = getRotateFn(radian)\n\n  for (let i = 0; i <= size; i++) {\n    const t = unitT * i + startRadian - radian\n    ret.push(add(rotateFn(vec(rx * Math.cos(t), ry * Math.sin(t))), center))\n  }\n\n  return ret\n}\n\n/**\n * Approximate arc path as a polyline\n * https://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n * @method approximateArcWithPoint\n * @param rx x軸半径\n * @param ry y軸半径\n * @param startPoint 開始点\n * @param endPoint 終了点\n * @param largeArcFlag 円弧の大きい側を使うフラグ\n * @param sweepFlag 時計回り円弧を使うフラグ\n * @param radian 傾き\n * @param size 分割数\n * @return 座標リスト\n */\nexport function approximateArcWithPoint(\n  rx: number,\n  ry: number,\n  startPoint: IVec2,\n  endPoint: IVec2,\n  largeArcFlag: boolean,\n  sweepFlag: boolean,\n  radian: number,\n  size: number\n): IVec2[] {\n  if (Math.abs(rx * ry) < MINVALUE) {\n    return [startPoint, endPoint]\n  }\n  return getApproPoints(\n    getArcLerpFn(rx, ry, startPoint, endPoint, largeArcFlag, sweepFlag, radian),\n    size\n  )\n}\n\nexport function getArcLerpFn(\n  rx: number,\n  ry: number,\n  startPoint: IVec2,\n  endPoint: IVec2,\n  largeArcFlag: boolean,\n  sweepFlag: boolean,\n  radian: number\n): (t: number) => IVec2 {\n  if (Math.abs(rx * ry) < MINVALUE) {\n    return (t) => lerpPoint(p0, p1, t)\n  }\n\n  const r = radian\n  const rotateFn = getRotateFn(r)\n  const p0 = startPoint\n  const p1 = endPoint\n  const a = rotateFn(vec((p0.x - p1.x) / 2, (p0.y - p1.y) / 2), true)\n  const ax2 = a.x * a.x\n  const ay2 = a.y * a.y\n\n  const l = ax2 / rx / rx + ay2 / ry / ry\n  const lsqrt = l > 1 ? Math.sqrt(l) : 1\n  const { x: rxa, y: rya } = vec(Math.abs(rx) * lsqrt, Math.abs(ry) * lsqrt)\n\n  const rx2 = rxa * rxa\n  const ry2 = rya * rya\n  const b = multi(\n    multi(\n      vec((rxa * a.y) / rya, (-rya * a.x) / rxa),\n      Math.sqrt(\n        Math.max(0, rx2 * ry2 - rx2 * ay2 - ry2 * ax2) / (rx2 * ay2 + ry2 * ax2)\n      )\n    ),\n    largeArcFlag === sweepFlag ? -1 : 1\n  )\n\n  const c = add(rotateFn(b), multi(add(p0, p1), 0.5))\n\n  const u = vec((a.x - b.x) / rxa, (a.y - b.y) / rya)\n  const v = vec((-a.x - b.x) / rxa, (-a.y - b.y) / rya)\n  const theta = getRadian(u)\n  const dtheta_tmp = (getRadian(v) - getRadian(u)) % (2 * Math.PI)\n  const dtheta =\n    !sweepFlag && 0 < dtheta_tmp\n      ? dtheta_tmp - 2 * Math.PI\n      : sweepFlag && dtheta_tmp < 0\n      ? dtheta_tmp + 2 * Math.PI\n      : dtheta_tmp\n\n  return (t) => {\n    if (t === 0) {\n      return startPoint\n    } else if (t === 1) {\n      return endPoint\n    } else {\n      const dr = theta + dtheta * t\n      return add(rotateFn(vec(rxa * Math.cos(dr), rya * Math.sin(dr))), c)\n    }\n  }\n}\n\nexport function lerpPoint(a: IVec2, b: IVec2, t: number): IVec2 {\n  return add(a, multi(sub(b, a), t))\n}\n\nexport function getApproPoints(\n  lerpFn: (t: number) => IVec2,\n  split: number\n): IVec2[] {\n  if (split <= 1) {\n    return [lerpFn(0), lerpFn(1)]\n  }\n\n  const points: IVec2[] = []\n  let step = 1 / split\n  for (let i = 0; i <= split; i++) {\n    points.push(lerpFn(step * i))\n  }\n  return points\n}\n\n/**\n * ２点を通る楕円の中心を求める\n * @param a 点a\n * @param b 点b\n * @param rx x軸半径\n * @param ry y軸半径\n * @param radian 傾き\n * @return 解となる２点\n * @return { centers: 解となる２点, radiusRate: 半径補正係数 }\n */\nexport function getEllipseCenter(\n  a: IVec2,\n  b: IVec2,\n  rx: number,\n  ry: number,\n  radian: number\n): { centers: IVec2[]; radiusRate: number } {\n  // 回転を打ち消す\n  a = rotate(a, -radian)\n  b = rotate(b, -radian)\n\n  // 媒介変数を利用して円の中心問題にする\n  const A = vec(a.x / rx, a.y / ry)\n  const B = vec(b.x / rx, b.y / ry)\n\n  // 円の中心取得\n  const centerInfo = getCircleCenter(A, B, 1)\n  const C = centerInfo.centers\n\n  // 楕円に戻す\n  let ans1 = vec(C[0].x * rx, C[0].y * ry)\n  let ans2 = vec(C[1].x * rx, C[1].y * ry)\n\n  // 回転を戻す\n  ans1 = rotate(ans1, radian)\n  ans2 = rotate(ans2, radian)\n\n  return {\n    centers: [ans1, ans2],\n    radiusRate: centerInfo.radiusRate,\n  }\n}\n\n/**\n * ２点を通る円の中心を求める\n * @param a 点a\n * @param b 点b\n * @param radius 半径\n * @return { centers: 解となる２点, radiusRate: 半径補正係数 }\n */\nexport function getCircleCenter(\n  a: IVec2,\n  b: IVec2,\n  radius: number\n): { centers: IVec2[]; radiusRate: number } {\n  const u1 = (a.x + b.x) / 2\n  const u2 = (a.x - b.x) / 2\n  const v1 = (a.y + b.y) / 2\n  const v2 = (a.y - b.y) / 2\n  const L = Math.sqrt(u2 * u2 + v2 * v2)\n  const t2 = Math.pow(radius / L, 2) - 1\n\n  // 2点が直径以上に離れている => 2点を直径とみなす\n  if (t2 < 0) {\n    const center = getCenter(a, b)\n    return {\n      centers: [center, center],\n      radiusRate: L / radius,\n    }\n  }\n\n  const t = Math.sqrt(t2)\n  const ans1 = vec(u1 + v2 * t, v1 - u2 * t)\n  const ans2 = vec(u1 - v2 * t, v1 + u2 * t)\n\n  return {\n    centers: [ans1, ans2],\n    radiusRate: 1,\n  }\n}\n\n/**\n * 2次元アフィン変換を行う\n * paramsには以下の行列をa b c d e fの順で指定する\n * a c e\n * b d f\n * @param points 変換前の座標リスト\n * @param params 行列成分\n * @return 座標リスト\n */\nexport function transform(points: IVec2[], params: number[]): IVec2[] {\n  const a = params[0]\n  const b = params[1]\n  const c = params[2]\n  const d = params[3]\n  const e = params[4]\n  const f = params[5]\n\n  return points.map((p) => vec(a * p.x + c * p.y + e, b * p.x + d * p.y + f))\n}\n\n/**\n * invert affine transfomation matrix\n * a c e\n * b d f\n * @param params [a, b, c, d, e, f]\n * @return inverted matrix params\n */\nexport function invertTransform(params: AffineMatrix): AffineMatrix {\n  const [a, b, c, d, e, f] = params\n  const t = a * d - b * c\n  return [\n    d / t,\n    -b / t,\n    -c / t,\n    a / t,\n    (c * f - d * e) / t,\n    -(a * f - b * e) / t,\n  ]\n}\n\n/**\n * multi affine transfomation matrixes\n * @param a affine matrix\n * @param b affine matrix\n * @return a * b\n */\nexport function multiAffine(a: AffineMatrix, b: AffineMatrix): AffineMatrix {\n  return [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    a[0] * b[4] + a[2] * b[5] + a[4],\n    a[1] * b[4] + a[3] * b[5] + a[5],\n  ]\n}\n\n/**\n * multi affines\n * @param affines affine matrix list\n * @return affines[0] * affines[1] * ...\n */\nexport function multiAffines(affines: AffineMatrix[]): AffineMatrix {\n  return affines.reduce((p, c) => {\n    return multiAffine(p, c)\n  }, IDENTITY_AFFINE)\n}\n\n/**\n * apply affine\n * @param affine affine matrix\n * @param v vector2\n * @return affine x v\n */\nexport function applyAffine(affine: AffineMatrix, v: IVec2): IVec2 {\n  return vec(\n    affine[0] * v.x + affine[2] * v.y + affine[4],\n    affine[1] * v.x + affine[3] * v.y + affine[5]\n  )\n}\n\n/**\n * 隣り合う同一点をオミットする\n * @method omitSamePoint\n * @param polygon ポリゴン\n * @return オミット後のポリゴン\n */\nexport function omitSamePoint(polygon: IVec2[]): IVec2[] {\n  let ret = polygon.concat()\n\n  // サイズ\n  const size = polygon.length\n  // 同一点探す\n  for (let i = 0; i < size; i++) {\n    const p1 = ret[i]\n    const p2 = ret[(i + 1) % size]\n    if (isSame(p1, p2)) {\n      // 同一\n      ret.splice(i, 1)\n      // 再帰\n      ret = omitSamePoint(ret)\n      break\n    }\n  }\n\n  return ret\n}\n\n/**\n * 正多角形の面積を内接円の半径から求める\n * @param radius 半径\n * @param n 角数\n * @return 面積\n */\nexport function getRegularPolygonArea(radius: number, n: number): number {\n  const unitRad = Math.PI / n\n  const unitArea = Math.pow(radius, 2) * Math.sin(unitRad) * Math.cos(unitRad)\n  return unitArea * n\n}\n\n/**\n * 正多角形の面積から内接円の半径を求める\n * @param area 面積\n * @param n 角数\n * @return 半径\n */\nexport function getRegularPolygonRadius(area: number, n: number): number {\n  const unitRad = Math.PI / n\n  const unitArea = area / n\n  return Math.sqrt(unitArea / Math.sin(unitRad) / Math.cos(unitRad))\n}\n\n/**\n * 包含関係にあるポリゴンをグループ化する\n * @param polygons ポリゴン一覧\n * @return グループ化したポリゴン一覧、グループ内は面積降順\n */\nexport function getIncludedPolygonGroups(polygons: IVec2[][]): IVec2[][][] {\n  const sorted = polygons.concat()\n  sorted.sort((a, b) => {\n    return getArea(b) - getArea(a)\n  })\n  const hit: { [s: string]: boolean } = {}\n  const ret: IVec2[][][] = []\n  sorted.forEach((p, i) => {\n    if (hit[i]) return\n    hit[i] = true\n    const group = [p].concat(\n      sorted.filter((c, j) => {\n        if (hit[j]) return false\n        const pointsOnPolygon = c.filter((point) => isOnPolygon(point, p))\n        if (pointsOnPolygon.length !== c.length) return false\n        hit[j] = true\n        return true\n      })\n    )\n    ret.push(group)\n  })\n  return ret\n}\n\n/**\n * ポリゴンブーリアン演算差\n * 突き抜けは非対応\n * targetは1辺のみでpolyと交差する前提\n * targetとpolyは観点方向が逆である前提\n * @param target ポリゴン\n * @param poly 切り取り範囲ポリゴン\n * @return 切り取った後のポリゴン\n */\nexport function getPolygonNotPolygon(target: IVec2[], poly: IVec2[]): IVec2[] {\n  const ret: IVec2[] = []\n\n  // targetの辺と交差するpolyの辺インデックスを探索\n  let targetCrossIndex: number = -1\n  const polyCrossIndexList: number[] = []\n  const cross: IVec2[] = []\n  for (let i = 0; i < target.length; i++) {\n    const currentSeg = [target[i], target[(i + 1) % target.length]]\n    for (let j = 0; j < poly.length; j++) {\n      const seg = [poly[j], poly[(j + 1) % poly.length]]\n      if (isCrossSegAndSeg(currentSeg, seg)) {\n        const p = getCrossSegAndLine(currentSeg, seg)\n        if (p) {\n          targetCrossIndex = i\n          polyCrossIndexList.push(j)\n          cross.push(p)\n        }\n      }\n    }\n    if (targetCrossIndex !== -1) break\n  }\n\n  if (targetCrossIndex === -1) return target\n  if (polyCrossIndexList.length % 2 !== 0) return target\n\n  // target辺の始点に最も近い交点を探す\n  const distList = cross.map((p) => getDistance(p, target[targetCrossIndex]))\n  const sortedDistList = distList.concat().sort((a, b) => a - b)\n  const nearestCrossIndex = distList.indexOf(sortedDistList[0])\n  const nearestIndex = polyCrossIndexList[nearestCrossIndex]\n\n  // nearestIndexが始点となるようpolyを調整\n  const adjustedPoly: IVec2[] = poly.concat()\n  for (let j = 0; j < nearestIndex; j++) {\n    adjustedPoly.push(adjustedPoly.shift() as IVec2)\n  }\n  // nearestIndexが先頭になるよう調整\n  const adjustedPolyCrossIndexList: number[] = polyCrossIndexList.map((n) => {\n    return (n - nearestIndex + poly.length) % poly.length\n  })\n  const adjustedCross: IVec2[] = cross.concat()\n  for (let k = 0; k < nearestCrossIndex; k++) {\n    adjustedPolyCrossIndexList.push(\n      adjustedPolyCrossIndexList.shift() as number\n    )\n    adjustedCross.push(adjustedCross.shift() as IVec2)\n  }\n\n  // polyと交差する辺が始点と終点になるよう調整\n  for (let i = 0; i < target.length; i++) {\n    ret.push(target[(i + targetCrossIndex + 1) % target.length])\n  }\n\n  // 交点からpolyに突入\n  for (let i = 0; i < adjustedPolyCrossIndexList.length / 2; i++) {\n    const startIndex = adjustedPolyCrossIndexList[i * 2]\n    const endIndex = adjustedPolyCrossIndexList[i * 2 + 1]\n    ret.push(adjustedCross[i * 2])\n    for (let j = startIndex + 1; j <= endIndex; j++) {\n      ret.push(adjustedPoly[j])\n    }\n    ret.push(adjustedCross[i * 2 + 1])\n  }\n\n  return ret\n}\n\n/**\n * ポリゴン全てを包含する矩形を取得\n * @param polygons ポリゴン一覧\n * @return 外接矩形\n */\nexport function getOuterRectangle(polygons: IVec2[][]): IRectangle {\n  if (polygons.length === 0)\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    }\n\n  let minX = Infinity\n  let minY = Infinity\n  let maxX = -Infinity\n  let maxY = -Infinity\n\n  for (let i = 0; i < polygons.length; i++) {\n    const polygon = polygons[i]\n    for (let j = 0; j < polygon.length; j++) {\n      const v = polygon[j]\n      minX = Math.min(minX, v.x)\n      minY = Math.min(minY, v.y)\n      maxX = Math.max(maxX, v.x)\n      maxY = Math.max(maxY, v.y)\n    }\n  }\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  }\n}\n\n/**\n * 矩形範囲のグリッド取得\n * @param range 矩形範囲\n * @param gridSize グリッド幅\n * @param dX x軸のずらし幅\n * @param dY y軸のずらし幅\n * @return グリッド線リスト\n */\nexport function getGrid(\n  range: IRectangle,\n  gridSize: number,\n  dX: number = 0,\n  dY: number = 0\n): IVec2[][] {\n  const gridList: IVec2[][] = []\n  const minX = range.x\n  const maxX = range.x + range.width\n  const minY = range.y\n  const maxY = range.y + range.height\n\n  let x = minX + dX\n  while (x < maxX) {\n    if (minX < x && x < maxX) {\n      gridList.push([vec(x, minY), vec(x, maxY)])\n    }\n    x += gridSize\n  }\n\n  let y = minY + dY\n  while (y < maxY) {\n    if (minY < y && y < maxY) {\n      gridList.push([vec(minX, y), vec(maxX, y)])\n    }\n    y += gridSize\n  }\n\n  return gridList\n}\n\n/**\n * 矩形を中心基準でサイズ変更する\n * @param org 元の矩形\n * @param dW 幅変更差分\n * @param dH 高さ変更差分\n * @return サイズ変更後の矩形\n */\nexport function expandRecntagle(\n  org: IRectangle,\n  dW: number,\n  dH: number\n): IRectangle {\n  return {\n    x: org.x - dW / 2,\n    y: org.y - dH / 2,\n    width: org.width + dW,\n    height: org.height + dH,\n  }\n}\n\n/**\n * 矩形を中心基準の倍率でサイズ変更する\n * @param org 元の矩形\n * @param scaleW 幅変更倍率\n * @param scaleH 高さ軸変更倍率\n * @return サイズ変更後の矩形\n */\nexport function expandRecntagleScale(\n  org: IRectangle,\n  scaleW: number,\n  scaleH: number\n): IRectangle {\n  return expandRecntagle(\n    org,\n    org.width * (scaleW - 1),\n    org.height * (scaleH - 1)\n  )\n}\n\n/**\n * interpolate scaler\n * @param from\n * @param to\n * @param rate 0 => from, 1 => to\n * @return interpolated value\n */\nexport function interpolateScaler(\n  from: number,\n  to: number,\n  rate: number\n): number {\n  return from * (1 - rate) + to * rate\n}\n\n/**\n * interpolate scaler\n * @param from\n * @param to\n * @param rate 0 => from, 1 => to\n * @return interpolated value\n */\nexport function interpolateVector(from: IVec2, to: IVec2, rate: number): IVec2 {\n  return vec(\n    interpolateScaler(from.x, to.x, rate),\n    interpolateScaler(from.y, to.y, rate)\n  )\n}\n\n/**\n * solve cubic equation for bezier3\n * throw if the equation does not have real solution in 0 <= t <= 1\n * @param a t^3 param\n * @param b t^2 param\n * @param c t param\n * @param d constant param\n * @return unique solution\n */\nfunction solveBezier3Fomula(\n  a: number,\n  b: number,\n  c: number,\n  d: number\n): number {\n  const list = solveQubicFomula(a, b, c, d)\n  if (list.length === 0) return 0\n\n  const ret = getCloseInRangeValue(list, 0, 1)\n  if (ret === undefined)\n    throw new Error('Error: Cannot resolve uniquely in 0 <= t <= 1.')\n\n  return Math.max(Math.min(ret, 1), 0)\n}\n\n/**\n * solve cubic equation in real space\n * @param a t^3 param\n * @param b t^2 param\n * @param c t param\n * @param d constant param\n * @return solutions in no particular order\n */\nexport function solveQubicFomula(\n  a: number,\n  b: number,\n  c: number,\n  d: number\n): number[] {\n  if (isCloseToZero(a)) {\n    return solveEquationOrder2(b, c, d)\n  }\n\n  const p = (3 * a * c - b * b) / (3 * a * a)\n  const q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a)\n\n  const Z = -b / (3 * a)\n\n  if (isCloseToZero(p) && isCloseToZero(q)) {\n    // triple real root\n    return [Z]\n  }\n\n  const D = (27 * q * q + 4 * p * p * p) / 108\n  if (isCloseToZero(D)) {\n    // one distinct root and double real root\n    const Q = Math.sign(q) * Math.pow(Math.abs(q) / 2, 1 / 3)\n    return [-2 * Q + Z, Q + Z]\n  } else if (D > 0) {\n    const sqrtD = Math.sqrt(D)\n    const tmpA = -q / 2 + sqrtD\n    const tmpB = -q / 2 - sqrtD\n    const A = Math.sign(tmpA) * Math.pow(Math.abs(tmpA), 1 / 3)\n    const B = Math.sign(tmpB) * Math.pow(Math.abs(tmpB), 1 / 3)\n\n    return [A + B + Z]\n  } else {\n    // three distinct real roots\n    const A = -q / 2\n    const B = Math.sqrt(-D)\n    const r = Math.atan2(B, A)\n    const C = 2 * Math.pow(A * A + B * B, 1 / 6)\n    const D0 = Math.cos(r / 3)\n    const D1 = Math.cos((r + 2 * Math.PI) / 3)\n    const D2 = Math.cos((r + 4 * Math.PI) / 3)\n\n    const T0 = C * D0 + Z\n    const T1 = C * D1 + Z\n    const T2 = C * D2 + Z\n\n    return [T0, T1, T2]\n  }\n}\n\nfunction getCloseInRangeValue(\n  values: number[],\n  min: number,\n  max: number\n): number | undefined {\n  return values.find((val) => {\n    if (min <= val && val <= max) return true\n    if (isCloseTo(val, min) || isCloseTo(val, max)) return true\n    return false\n  })\n}\n\nfunction isCloseTo(val: number, target: number): boolean {\n  return Math.abs(val - target) < MINVALUE\n}\n\nfunction isCloseToZero(val: number): boolean {\n  return Math.abs(val) < MINVALUE\n}\n\n/**\n * clamp number\n * @param min min value\n * @param max max value\n * @return clamped value\n */\nexport function clamp(min = -Infinity, max = Infinity, val: number) {\n  return Math.max(Math.min(val, max), min)\n}\n\n/**\n * clamp number circularly\n * @param min min value\n * @param max max value\n * @return clamped value\n */\nexport function circleClamp(min: number, max: number, val: number) {\n  if (min === max) return min\n\n  if (max < val) {\n    return ((val - max) % (max - min)) + min\n  } else if (val < min) {\n    return max - ((min - val) % (max - min))\n  } else {\n    return val\n  }\n}\n\n/**\n * round trip value\n * @param min min value\n * @param max max value\n * @return round tripped value\n */\nexport function roundTrip(min: number, max: number, val: number) {\n  const harf = max - min\n  const length = 2 * harf\n  if (length === 0) return min\n\n  const d = Math.abs(val - min) % length\n  if (d < harf) {\n    return d + min\n  } else {\n    return length - d + min\n  }\n}\n","import { AffineMatrix, ISvgConfigs, ISvgPath, ISvgStyle, IVec2 } from './types'\nimport * as geo from './geo'\n\nconst HTTP_SVG = 'http://www.w3.org/2000/svg'\n// Unary plus operator seems faster than native parseFloat\nconst _parseFloat = (v: string) => +v\n\nexport const configs: ISvgConfigs = {\n  bezierSplitSize: 10,\n  ellipseSplitSize: 20,\n}\n\n/**\n * 描画\n * @param ctx 描画要素\n * @param pathInfo 図形情報\n */\nexport function draw(ctx: CanvasRenderingContext2D, pathInfo: ISvgPath): void {\n  ctx.lineCap = pathInfo.style.lineCap as CanvasLineCap\n  ctx.lineJoin = pathInfo.style.lineJoin as CanvasLineJoin\n\n  ctx.beginPath()\n  pathInfo.d.forEach((p, i) => {\n    if (i === 0) {\n      ctx.moveTo(p.x, p.y)\n    } else {\n      ctx.lineTo(p.x, p.y)\n    }\n  })\n  ctx.closePath()\n\n  if (pathInfo.included) {\n    pathInfo.included.forEach((poly) => {\n      poly.forEach((p, i) => {\n        if (i === 0) {\n          ctx.moveTo(p.x, p.y)\n        } else {\n          ctx.lineTo(p.x, p.y)\n        }\n      })\n      ctx.closePath()\n    })\n  }\n\n  if (pathInfo.style.fill) {\n    ctx.fillStyle = pathInfo.style.fillStyle\n    ctx.globalAlpha = pathInfo.style.fillGlobalAlpha\n    ctx.fill()\n  }\n\n  // 枠\n  if (pathInfo.style.stroke) {\n    ctx.strokeStyle = pathInfo.style.strokeStyle\n    ctx.globalAlpha = pathInfo.style.strokeGlobalAlpha\n    ctx.lineWidth = pathInfo.style.lineWidth\n    ctx.setLineDash(pathInfo.style.lineDash)\n    ctx.stroke()\n  }\n  ctx.globalAlpha = 1\n}\n\n/**\n * 矩形に収まるよう調整\n * @param pathInfoList パス情報リスト\n * @param x 矩形x座標\n * @param y 矩形y座標\n * @param width 矩形width\n * @param height 矩形height\n * @return 調整後パス情報リスト\n */\nexport function fitRect(\n  pathInfoList: ISvgPath[],\n  x: number,\n  y: number,\n  width: number,\n  height: number\n): ISvgPath[] {\n  let minX: number = Infinity\n  let maxX: number = -Infinity\n  let minY: number = Infinity\n  let maxY: number = -Infinity\n  pathInfoList.forEach((info) => {\n    info.d.forEach((p) => {\n      minX = Math.min(minX, p.x)\n      maxX = Math.max(maxX, p.x)\n      minY = Math.min(minY, p.y)\n      maxY = Math.max(maxY, p.y)\n    })\n  })\n\n  // 原点基準に移動\n  const fromBaseList = pathInfoList.map((info) => ({\n    ...info,\n    d: info.d.map((p) => geo.vec(p.x - minX, p.y - minY)),\n  }))\n  // 伸縮\n  const orgWidth = maxX - minX\n  const orgHeight = maxY - minY\n  const rateX = width / orgWidth\n  const rateY = height / orgHeight\n  const rate = Math.min(rateX, rateY)\n  const scaledList = fromBaseList.map((info) => ({\n    ...info,\n    d: info.d.map((p) => geo.vec(p.x * rate, p.y * rate)),\n  }))\n  // 矩形位置に移動\n  const difX = x + (width - orgWidth * rate) / 2\n  const difY = y + (height - orgHeight * rate) / 2\n  const convertedList: ISvgPath[] = scaledList.map((info) => ({\n    ...info,\n    d: info.d.map((p) => geo.vec(p.x + difX, p.y + difY)),\n    included: (info.included || []).map((poly: IVec2[]) => {\n      return poly.map((p) =>\n        geo.vec((p.x - minX) * rate + difX, (p.y - minY) * rate + difY)\n      )\n    }),\n  }))\n\n  return convertedList\n}\n\n/**\n * SVG文字列から図形のパス情報を取得する\n * 対応タグ: path,rect,ellipse,circle\n * @param svgString SVGリソース文字列\n * @return パス情報リスト\n */\nexport function parseSvgGraphicsStr(svgString: string): ISvgPath[] {\n  const domParser = new DOMParser()\n  const svgDom = domParser.parseFromString(svgString, 'image/svg+xml')\n  const svgTags = svgDom.getElementsByTagName('svg')\n  if (!svgTags || svgTags.length === 0) return []\n  return parseSvgGraphics(svgTags[0] as SVGElement)\n}\n\n/**\n * parse SVG tree\n * @param elm SVGElement\n * @return path informations\n */\nfunction parseSvgTree(\n  elm: SVGElement,\n  parentInfo?: { style?: ISvgStyle; transform?: AffineMatrix }\n): ISvgPath[] {\n  const style = { ...(parentInfo?.style ?? {}), ...parseTagStyle(elm) }\n\n  const transformStr = elm.getAttribute('transform')\n  const parentTransform = parentInfo?.transform ?? geo.IDENTITY_AFFINE\n\n  let ret: ISvgPath[] = []\n\n  const svgPath = parseSVGShape(elm)\n  if (svgPath) {\n    ret.push({\n      ...svgPath,\n      d: svgPath.d.map((v) => geo.applyAffine(parentTransform, v)),\n    })\n  }\n\n  if (elm.children.length > 0) {\n    const transform = transformStr\n      ? geo.multiAffine(parentTransform, parseTransform(transformStr))\n      : parentTransform\n\n    Array.from(elm.children).forEach((child) => {\n      ret = ret.concat(parseSvgTree(child as SVGElement, { style, transform }))\n    })\n  }\n\n  return ret\n}\n\nfunction parseSVGShape(elm: SVGElement): ISvgPath | undefined {\n  switch (elm.tagName.toLowerCase()) {\n    case 'path':\n      return {\n        d: parsePath(elm as SVGPathElement),\n        style: parseTagStyle(elm),\n      }\n    case 'rect':\n      return {\n        d: parseRect(elm as SVGRectElement),\n        style: parseTagStyle(elm),\n      }\n    case 'ellipse':\n      return {\n        d: parseEllipse(elm as SVGEllipseElement),\n        style: parseTagStyle(elm),\n      }\n    case 'circle':\n      return {\n        d: parseCircle(elm as SVGCircleElement),\n        style: parseTagStyle(elm),\n      }\n    default:\n      return undefined\n  }\n}\n\n/**\n * SVGタグから図形のパス情報を取得する\n * 対応タグ: path,rect,ellipse,circle\n * @param svgTag SVGタグ\n * @return パス情報リスト\n */\nexport function parseSvgGraphics(svgTag: SVGElement): ISvgPath[] {\n  return parseSvgTree(svgTag)\n}\n\n/**\n * opentype.jsのpath.commandをd文字列に変換する\n * @param fontPath opentype.jsのpath.command\n * @return d文字列\n */\nexport function openCommandToD(command: any): string {\n  let d: string = command.type\n  if ('x1' in command) d += ` ${command.x1}`\n  if ('y1' in command) d += ` ${command.y1}`\n  if ('x2' in command) d += ` ${command.x2}`\n  if ('y2' in command) d += ` ${command.y2}`\n  if ('x3' in command) d += ` ${command.x3}`\n  if ('y3' in command) d += ` ${command.y3}`\n  if ('x' in command) d += ` ${command.x}`\n  if ('y' in command) d += ` ${command.y}`\n  return d\n}\n\n/**\n * opentype.jsのpathを解析する\n * @param fontPath opentype.jsのpath\n * @return パス情報リスト\n */\nexport function parseOpenPath(fontPath: { commands: any[] }): ISvgPath[] {\n  const pathInfoList: ISvgPath[] = []\n  let current: string = ''\n  fontPath.commands.forEach((c: any) => {\n    current += openCommandToD(c) + ' '\n    if (current && c.type.toUpperCase() === 'Z') {\n      const pathList = parsePathD(current)\n      pathInfoList.push({\n        d: pathList,\n        style: {\n          ...createStyle(),\n          fill: true,\n          fillStyle: 'black',\n          stroke: false,\n        },\n      })\n      current = ''\n    }\n  })\n  return pathInfoList\n}\n\nexport type PathSegmentRaw =\n  | ['Z' | 'z']\n  | ['H' | 'h' | 'V' | 'v', number]\n  | ['M' | 'm' | 'L' | 'l' | 'T' | 't', number, number]\n  | ['Q' | 'q' | 'S' | 's', number, number, number, number]\n  | ['C' | 'c', number, number, number, number, number, number]\n  | ['A' | 'a', number, number, number, boolean, boolean, number, number]\n\nfunction parsePathSegmentRaw(segment: string[]): PathSegmentRaw {\n  if (segment.length === 8) {\n    return [\n      segment[0],\n      _parseFloat(segment[1]),\n      _parseFloat(segment[2]),\n      _parseFloat(segment[3]),\n      segment[4] !== '0',\n      segment[5] !== '0',\n      _parseFloat(segment[6]),\n      _parseFloat(segment[7]),\n    ] as PathSegmentRaw\n  } else {\n    const [c, ...values] = segment\n    return [c, ...values.map(_parseFloat)] as PathSegmentRaw\n  }\n}\n\nexport function parsePathSegmentRaws(dStr: string): PathSegmentRaw[] {\n  return splitD(dStr).map((c) => parsePathSegmentRaw(c))\n}\n\nexport function pathSegmentRawsToString(segs: PathSegmentRaw[]): string {\n  return segs.map(pathSegmentRawToString).join(' ')\n}\n\nexport function pathSegmentRawToString(seg: PathSegmentRaw): string {\n  return seg\n    .map((v) => {\n      if (v === true) {\n        return '1'\n      } else if (v === false) {\n        return '0'\n      } else {\n        return v.toString()\n      }\n    })\n    .join(' ')\n}\n\ntype PathSegment =\n  | {\n      command: string\n      lerpFn: (t: number) => IVec2\n      curve: true\n    }\n  | {\n      command: string\n      segment: [IVec2, IVec2]\n      curve?: undefined\n    }\n\nexport function parsePathSegments(dStr: string): PathSegment[] {\n  return _parsePathSegments(parsePathSegmentRaws(dStr))\n}\n\nfunction _parsePathSegments(segments: PathSegmentRaw[]): PathSegment[] {\n  const ret: PathSegment[] = []\n  let startP = geo.vec(0, 0)\n  let currentP = startP\n  let currentControlP = startP\n  let currentBezier: 1 | 2 | 3 = 1\n  segments.forEach((current) => {\n    switch (current[0]) {\n      case 'M': {\n        const p1 = geo.vec(current[1], current[2])\n        ret.push({ command: 'M', segment: [p1, p1] })\n        startP = p1\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'm': {\n        const p1 = geo.vec(current[1], current[2])\n        ret.push({ command: 'm', segment: [p1, p1] })\n        startP = p1\n        currentP = p1\n        currentControlP = p1\n        currentBezier = 1\n        break\n      }\n      case 'L': {\n        const p0 = currentP\n        const p1 = geo.vec(current[1], current[2])\n        ret.push({ command: 'L', segment: [p0, p1] })\n        startP ??= p1\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'l': {\n        const p0 = currentP\n        const p1 = geo.add(currentP, geo.vec(current[1], current[2]))\n        ret.push({ command: 'l', segment: [p0, p1] })\n        startP ??= p1\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'H': {\n        const p0 = currentP\n        const p1 = geo.vec(current[1], p0.y)\n        ret.push({ command: 'H', segment: [p0, p1] })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'h': {\n        const p0 = currentP\n        const p1 = geo.vec(current[1] + p0.x, p0.y)\n        ret.push({ command: 'h', segment: [p0, p1] })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'V': {\n        const p0 = currentP\n        const p1 = geo.vec(p0.x, current[1])\n        ret.push({ command: 'V', segment: [p0, p1] })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'v': {\n        const p0 = currentP\n        const p1 = geo.vec(p0.x, current[1] + p0.y)\n        ret.push({ command: 'v', segment: [p0, p1] })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'Q': {\n        const p0 = currentP\n        const p1 = geo.vec(current[1], current[2])\n        const p2 = geo.vec(current[3], current[4])\n        ret.push({\n          command: 'Q',\n          lerpFn: geo.getBezier2LerpFn([p0, p1, p2]),\n          curve: true,\n        })\n        currentControlP = p1\n        currentBezier = 2\n        currentP = p2\n        break\n      }\n      case 'q': {\n        const p0 = currentP\n        const p1 = geo.add(p0, geo.vec(current[1], current[2]))\n        const p2 = geo.add(p0, geo.vec(current[3], current[4]))\n        ret.push({\n          command: 'q',\n          lerpFn: geo.getBezier2LerpFn([p0, p1, p2]),\n          curve: true,\n        })\n        currentControlP = p1\n        currentBezier = 2\n        currentP = p2\n        break\n      }\n      case 'T': {\n        const p0 = currentP\n        const p1 =\n          currentBezier === 2 ? geo.getSymmetry(currentControlP, p0) : p0\n        const p2 = geo.vec(current[1], current[2])\n        ret.push({\n          command: 'T',\n          lerpFn: geo.getBezier2LerpFn([p0, p1, p2]),\n          curve: true,\n        })\n        currentControlP = p1\n        currentBezier = 2\n        currentP = p2\n        break\n      }\n      case 't': {\n        const p0 = currentP\n        const p1 =\n          currentBezier === 2 ? geo.getSymmetry(currentControlP, p0) : p0\n        const p2 = geo.add(p0, geo.vec(current[1], current[2]))\n        ret.push({\n          command: 't',\n          lerpFn: geo.getBezier2LerpFn([p0, p1, p2]),\n          curve: true,\n        })\n        currentControlP = p1\n        currentBezier = 2\n        currentP = p2\n        break\n      }\n      case 'C': {\n        const p0 = currentP\n        const p1 = geo.vec(current[1], current[2])\n        const p2 = geo.vec(current[3], current[4])\n        const p3 = geo.vec(current[5], current[6])\n        ret.push({\n          command: 'C',\n          lerpFn: geo.getBezier3LerpFn([p0, p1, p2, p3]),\n          curve: true,\n        })\n        currentControlP = p2\n        currentBezier = 3\n        currentP = p3\n        break\n      }\n      case 'c': {\n        const p0 = currentP\n        const p1 = geo.add(p0, geo.vec(current[1], current[2]))\n        const p2 = geo.add(p0, geo.vec(current[3], current[4]))\n        const p3 = geo.add(p0, geo.vec(current[5], current[6]))\n        ret.push({\n          command: 'c',\n          lerpFn: geo.getBezier3LerpFn([p0, p1, p2, p3]),\n          curve: true,\n        })\n        currentControlP = p2\n        currentBezier = 3\n        currentP = p3\n        break\n      }\n      case 'S': {\n        const p0 = currentP\n        const p1 =\n          currentBezier === 3 ? geo.getSymmetry(currentControlP, p0) : p0\n        const p2 = geo.vec(current[1], current[2])\n        const p3 = geo.vec(current[3], current[4])\n        ret.push({\n          command: 'S',\n          lerpFn: geo.getBezier3LerpFn([p0, p1, p2, p3]),\n          curve: true,\n        })\n        currentControlP = p2\n        currentBezier = 3\n        currentP = p3\n        break\n      }\n      case 's': {\n        const p0 = currentP\n        const p1 =\n          currentBezier === 3 ? geo.getSymmetry(currentControlP, p0) : p0\n        const p2 = geo.add(p0, geo.vec(current[1], current[2]))\n        const p3 = geo.add(p0, geo.vec(current[3], current[4]))\n        ret.push({\n          command: 's',\n          lerpFn: geo.getBezier3LerpFn([p0, p1, p2, p3]),\n          curve: true,\n        })\n        currentControlP = p2\n        currentBezier = 3\n        currentP = p3\n        break\n      }\n      case 'A': {\n        const p0 = currentP\n        const rx = current[1]\n        const ry = current[2]\n        const large = current[4]\n        const sweep = current[5]\n        const radian = (current[3] / 180) * Math.PI\n        const p1 = geo.vec(current[6], current[7])\n        ret.push({\n          command: 'A',\n          lerpFn: geo.getArcLerpFn(rx, ry, p0, p1, large, sweep, radian),\n          curve: true,\n        })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'a': {\n        const p0 = currentP\n        const rx = current[1]\n        const ry = current[2]\n        const large = current[4]\n        const sweep = current[5]\n        const radian = (current[3] / 180) * Math.PI\n        const p1 = geo.add(p0, geo.vec(current[6], current[7]))\n        ret.push({\n          command: 'a',\n          lerpFn: geo.getArcLerpFn(rx, ry, p0, p1, large, sweep, radian),\n          curve: true,\n        })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n      case 'Z':\n      case 'z': {\n        const p0 = currentP\n        const p1 = startP\n        ret.push({\n          command: current[0],\n          segment: [p0, p1],\n        })\n        currentControlP = p1\n        currentBezier = 1\n        currentP = p1\n        break\n      }\n    }\n  })\n\n  return ret\n}\n\nexport interface PathLengthStruct {\n  lerpFn: (t: number) => IVec2\n  length: number\n}\n\nexport function getPathLengthStructs(\n  dStr: string,\n  split = configs.bezierSplitSize\n): PathLengthStruct[] {\n  return parsePathSegments(dStr).map((seg) => ({\n    lerpFn: seg.curve\n      ? seg.lerpFn\n      : (t) => geo.lerpPoint(seg.segment[0], seg.segment[1], t),\n    length: geo.getPolylineLength(\n      seg.curve ? geo.getApproPoints(seg.lerpFn, split) : seg.segment\n    ),\n  }))\n}\n\n/**\n * Execute \"getPathTotalLength\" with cacheable structs generated by \"getPathLengthStructs\"\n */\nexport function getPathTotalLengthFromStructs(\n  structs: PathLengthStruct[]\n): number {\n  return structs.reduce((p, s) => p + s.length, 0)\n}\n\n/**\n * Alternative function of \"SVGGeometryElement.getTotalLength\"\n * @param dStr d string of path element\n * @param split the number of segments to approximate a curve\n * @return total length of the path\n */\nexport function getPathTotalLength(\n  dStr: string,\n  split = configs.bezierSplitSize\n): number {\n  return getPathTotalLengthFromStructs(getPathLengthStructs(dStr, split))\n}\n\n/**\n * Execute \"getPathPointAtLength\" with cacheable structs generated by \"getPathLengthStructs\"\n */\nexport function getPathPointAtLengthFromStructs(\n  structs: PathLengthStruct[],\n  distance: number\n): IVec2 {\n  let l = Math.max(distance, 0)\n  for (let i = 0; i < structs.length; i++) {\n    const s = structs[i]\n    if (l < s.length) {\n      return s.lerpFn(l / s.length)\n    } else {\n      l -= s.length\n    }\n  }\n  return structs.length > 0\n    ? structs[structs.length - 1].lerpFn(1)\n    : geo.vec(0, 0)\n}\n\n/**\n * Alternative function of \"SVGGeometryElement.getPointAtLength\"\n * @param dStr d string of path element\n * @param distance target length\n * @param split the number of segments to approximate a curve\n * @return the point at the target length\n */\nexport function getPathPointAtLength(\n  dStr: string,\n  distance: number,\n  split = configs.bezierSplitSize\n): IVec2 {\n  return getPathPointAtLengthFromStructs(\n    getPathLengthStructs(dStr, split),\n    distance\n  )\n}\n\nfunction getPathAbsPoints(segments: PathSegmentRaw[]): {\n  controls: IVec2[]\n  points: IVec2[]\n} {\n  const points: IVec2[] = []\n  const controls: IVec2[] = []\n\n  let seg: PathSegmentRaw\n  let startP = geo.vec(0, 0)\n  let absP = startP\n  let preC = startP\n  let preCType: 1 | 2 | 3 = 1\n  for (let i = 0; i < segments.length; i++) {\n    seg = segments[i]\n    switch (seg[0]) {\n      case 'M': {\n        const p = geo.vec(seg[1], seg[2])\n        startP = absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'm': {\n        const p = geo.add(geo.vec(seg[1], seg[2]), absP)\n        startP = absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'L': {\n        const p = geo.vec(seg[1], seg[2])\n        startP ??= p\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'l': {\n        const p = geo.add(geo.vec(seg[1], seg[2]), absP)\n        startP ??= p\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'H': {\n        const p = geo.vec(seg[1], absP.y)\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'h': {\n        const p = geo.vec(seg[1] + absP.x, absP.y)\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'V': {\n        const p = geo.vec(absP.x, seg[1])\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'v': {\n        const p = geo.vec(absP.x, seg[1] + absP.y)\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'Q': {\n        const p = geo.vec(seg[1], seg[2])\n        preC = p\n        absP = geo.vec(seg[3], seg[4])\n        preCType = 2\n        break\n      }\n      case 'q': {\n        const p = geo.vec(seg[1] + absP.x, seg[2] + absP.y)\n        preC = p\n        absP = geo.vec(seg[3] + absP.x, seg[4] + absP.y)\n        preCType = 2\n        break\n      }\n      case 'T': {\n        const p = preCType === 2 ? geo.lerpPoint(preC, absP, 2) : absP\n        preC = p\n        absP = geo.vec(seg[1], seg[2])\n        preCType = 2\n        break\n      }\n      case 't': {\n        const p = preCType === 2 ? geo.lerpPoint(preC, absP, 2) : absP\n        preC = p\n        absP = geo.vec(seg[1] + absP.x, seg[2] + absP.y)\n        preCType = 2\n        break\n      }\n      case 'C': {\n        const p = geo.vec(seg[3], seg[4])\n        preC = p\n        absP = geo.vec(seg[5], seg[6])\n        preCType = 3\n        break\n      }\n      case 'c': {\n        const p = geo.vec(seg[3] + absP.x, seg[4] + absP.y)\n        preC = p\n        absP = geo.vec(seg[5] + absP.x, seg[6] + absP.y)\n        preCType = 3\n        break\n      }\n      case 'S': {\n        const p = preCType === 3 ? geo.lerpPoint(preC, absP, 2) : absP\n        preC = p\n        absP = geo.vec(seg[3], seg[4])\n        preCType = 3\n        break\n      }\n      case 's': {\n        const p = preCType === 3 ? geo.lerpPoint(preC, absP, 2) : absP\n        preC = p\n        absP = geo.vec(seg[3] + absP.x, seg[4] + absP.y)\n        preCType = 3\n        break\n      }\n      case 'A': {\n        const p = geo.vec(seg[6], seg[7])\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'a': {\n        const p = geo.vec(seg[6] + absP.x, seg[7] + absP.y)\n        absP = preC = p\n        preCType = 1\n        break\n      }\n      case 'Z':\n      case 'z': {\n        absP = preC = startP\n        preCType = 1\n        break\n      }\n      default:\n        throw getUnknownError()\n    }\n\n    controls.push(preC)\n    points.push(absP)\n  }\n\n  return { points, controls }\n}\n\nfunction isCurveCommand(c: string) {\n  return /Q|q|T|t|C|c|S|s|A|a/.test(c)\n}\n\n/**\n * The first segment has to be either \"M\", \"m\", \"L\" or \"l\".\n *\n * The last segment will be converted to normalized value.\n * e.g. [m, l, v, z] => [M, v, l, z]\n *\n * \"T\", \"t\", \"S\" or \"s\" will be converted to \"Q\", \"q\", \"C\" or \"c\"\n */\nexport function reversePath(segments: PathSegmentRaw[]): PathSegmentRaw[] {\n  if (segments.length < 2) return segments\n\n  const ret: PathSegmentRaw[] = []\n\n  const { points: absPoints, controls: absContolPoints } =\n    getPathAbsPoints(segments)\n\n  const length = segments.length\n  let current: PathSegmentRaw\n  let absP: IVec2\n  let closeCount = false\n  for (let i = length - 1; 0 <= i; i--) {\n    current = segments[i]\n    absP = absPoints[i === 0 ? length - 1 : i - 1]\n\n    switch (current[0]) {\n      case 'M':\n        if (closeCount) {\n          if (isCurveCommand(ret[ret.length - 1][0])) {\n            ret.push(['Z'])\n          } else {\n            ret[ret.length - 1] = ['Z']\n          }\n          closeCount = false\n        }\n        ret.push([current[0], absP.x, absP.y])\n        break\n      case 'm':\n        if (closeCount) {\n          if (isCurveCommand(ret[ret.length - 1][0])) {\n            ret.push(['z'])\n          } else {\n            ret[ret.length - 1] = ['z']\n          }\n          closeCount = false\n        }\n        if (i === 0) {\n          ret.push(['M', absP.x, absP.y])\n        } else {\n          ret.push([current[0], -current[1], -current[2]])\n        }\n        break\n      case 'L':\n        if (closeCount && i === 0) {\n          if (isCurveCommand(ret[ret.length - 1][0])) {\n            ret.push(['Z'])\n          } else {\n            ret[ret.length - 1] = ['Z']\n          }\n          closeCount = false\n        }\n        ret.push([current[0], absP.x, absP.y])\n        break\n      case 'l':\n        if (closeCount && i === 0) {\n          if (isCurveCommand(ret[ret.length - 1][0])) {\n            ret.push(['z'])\n          } else {\n            ret[ret.length - 1] = ['z']\n          }\n          closeCount = false\n        }\n        if (i === 0) {\n          ret.push(['L', absP.x, absP.y])\n        } else {\n          ret.push([current[0], -current[1], -current[2]])\n        }\n        break\n      case 'H':\n        ret.push([current[0], absP.x])\n        break\n      case 'h':\n        ret.push([current[0], -current[1]])\n        break\n      case 'V':\n        ret.push([current[0], absP.y])\n        break\n      case 'v':\n        ret.push([current[0], -current[1]])\n        break\n      case 'Q': {\n        ret.push([current[0], current[1], current[2], absP.x, absP.y])\n        break\n      }\n      case 'q': {\n        ret.push([\n          current[0],\n          current[1] - current[3],\n          current[2] - current[4],\n          -current[3],\n          -current[4],\n        ])\n        break\n      }\n      case 'T': {\n        const c = absContolPoints[i]\n        ret.push(['Q', c.x, c.y, absP.x, absP.y])\n        break\n      }\n      case 't': {\n        const b = absPoints[i]\n        const c = absContolPoints[i]\n        ret.push(['q', c.x - b.x, c.y - b.y, -current[1], -current[2]])\n        break\n      }\n      case 'C': {\n        ret.push([\n          current[0],\n          current[3],\n          current[4],\n          current[1],\n          current[2],\n          absP.x,\n          absP.y,\n        ])\n        break\n      }\n      case 'c': {\n        ret.push([\n          current[0],\n          current[3] - current[5],\n          current[4] - current[6],\n          current[1] - current[5],\n          current[2] - current[6],\n          -current[5],\n          -current[6],\n        ])\n        break\n      }\n      case 'S': {\n        const c = absContolPoints[i]\n        ret.push(['C', current[1], current[2], c.x, c.y, absP.x, absP.y])\n        break\n      }\n      case 's': {\n        const b = absPoints[i]\n        const c = absContolPoints[i]\n        ret.push([\n          'c',\n          current[1] - current[3],\n          current[2] - current[4],\n          c.x - b.x,\n          c.y - b.y,\n          -current[3],\n          -current[4],\n        ])\n        break\n      }\n      case 'A': {\n        ret.push([\n          current[0],\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          !current[5],\n          absP.x,\n          absP.y,\n        ])\n        break\n      }\n      case 'a': {\n        ret.push([\n          current[0],\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          !current[5],\n          -current[6],\n          -current[7],\n        ])\n        break\n      }\n      case 'Z':\n        closeCount = true\n        ret.push(['L', absP.x, absP.y])\n        break\n      case 'z': {\n        closeCount = true\n        const absPP = absPoints[i]\n        ret.push(['l', absP.x - absPP.x, absP.y - absPP.y])\n        break\n      }\n    }\n  }\n\n  ret.unshift(ret.pop()!)\n\n  return ret\n}\n\n/**\n * Slide segments.\n * Relative segments will not be slided by this function.\n */\nexport function slidePath(\n  segments: PathSegmentRaw[],\n  diff: IVec2\n): PathSegmentRaw[] {\n  return segments.map((current) => {\n    const slided: PathSegmentRaw = [...current]\n    switch (slided[0]) {\n      case 'H':\n        slided[1] += diff.x\n        break\n      case 'V':\n        slided[1] += diff.y\n        break\n      case 'A':\n        slided[6] += diff.x\n        slided[7] += diff.y\n        break\n      default:\n        if (slided[0] === slided[0].toUpperCase()) {\n          for (let i = 1; i < slided.length - 1; i += 2) {\n            ;(slided[i] as number) += diff.x\n            ;(slided[i + 1] as number) += diff.y\n          }\n        }\n        break\n    }\n    return slided\n  })\n}\n\n/**\n * Scale segments.\n * Both abstract and relative segments will be scaled by this function.\n */\nexport function scalePath(\n  segments: PathSegmentRaw[],\n  scale: IVec2\n): PathSegmentRaw[] {\n  return segments.map((current) => {\n    const slided: PathSegmentRaw = [...current]\n    switch (slided[0]) {\n      case 'H':\n      case 'h':\n        slided[1] *= scale.x\n        break\n      case 'V':\n      case 'v':\n        slided[1] *= scale.y\n        break\n      case 'A':\n      case 'a':\n        slided[1] *= Math.abs(scale.x)\n        slided[2] *= Math.abs(scale.y)\n        if (scale.x * scale.y < 0) {\n          slided[5] = !slided[5]\n        }\n        slided[6] *= scale.x\n        slided[7] *= scale.y\n        break\n      default:\n        for (let i = 1; i < slided.length - 1; i += 2) {\n          ;(slided[i] as number) *= scale.x\n          ;(slided[i + 1] as number) *= scale.y\n        }\n        break\n    }\n    return slided\n  })\n}\n\nfunction convertHVToL(segments: PathSegmentRaw[]): PathSegmentRaw[] {\n  // If neither \"H\" nor \"V\" exists, abstract points doesn't have to be computed.\n  const absVHExisted = segments.some((s) => /H|V/.test(s[0]))\n  const { points } = getPathAbsPoints(absVHExisted ? segments : [])\n\n  return segments.map((s, i) => {\n    switch (s[0]) {\n      case 'H':\n        return ['L', s[1], points[i].y]\n      case 'h':\n        return ['l', s[1], 0]\n      case 'V':\n        return ['L', points[i].x, s[1]]\n      case 'v':\n        return ['l', 0, s[1]]\n      default:\n        return s\n    }\n  })\n}\n\n/**\n * Rotate segments.\n * Both abstract and relative segments will be rotated by this function.\n * \"H\", \"h\", \"V\" and \"v\" will be converted to \"L\" or \"l\"\n */\nexport function rotatePath(\n  segments: PathSegmentRaw[],\n  radian: number\n): PathSegmentRaw[] {\n  const sin = Math.sin(radian)\n  const cos = Math.cos(radian)\n  return convertHVToL(segments).map((current) => {\n    const slided: PathSegmentRaw = [...current]\n    switch (slided[0]) {\n      case 'A':\n      case 'a': {\n        slided[3] += (radian * 180) / Math.PI\n        const x = slided[6]\n        const y = slided[7]\n        slided[6] = cos * x - sin * y\n        slided[7] = sin * x + cos * y\n        break\n      }\n      default:\n        for (let i = 1; i < slided.length - 1; i += 2) {\n          const x = slided[i] as number\n          const y = slided[i + 1] as number\n          ;(slided[i] as number) = cos * x - sin * y\n          ;(slided[i + 1] as number) = sin * x + cos * y\n        }\n        break\n    }\n    return slided\n  })\n}\n\n/**\n * Parse path d string and approximate it as a polyline\n * Note:\n * - Jump information by M/m commands doesn't remain in a polyline\n * - Z/z commands are ignored => The tail point doesn't become the same as the head one by these commands\n * @param dStr d string of path element\n * @return approximated polyline\n */\nexport function parsePathD(\n  dStr: string,\n  split = configs.bezierSplitSize\n): IVec2[] {\n  const _split = Math.max(1, split)\n  let ret: IVec2[] = []\n  let step = 1 / _split\n  parsePathSegments(dStr).forEach((seg) => {\n    if (seg.command === 'Z' || seg.command === 'z') return\n\n    if (seg.curve) {\n      for (let i = 1; i <= _split; i++) {\n        ret.push(seg.lerpFn(step * i))\n      }\n    } else {\n      ret.push(seg.segment[1])\n    }\n  })\n  return ret\n}\n\n/**\n * pathタグを解析する\n * @param svgPath SVGのpathタグDOM\n * @return 座標リスト\n */\nexport function parsePath(svgPath: SVGPathElement): IVec2[] {\n  const dStr = svgPath.getAttribute('d')\n  return dStr\n    ? adoptTransform(svgPath.getAttribute('transform'), parsePathD(dStr))\n    : []\n}\n\n/**\n * rectタグを解析する\n * @param SVGのrectタグDOM\n * @return 座標リスト\n */\nexport function parseRect(svgRect: SVGRectElement): IVec2[] {\n  const x = _parseFloat(svgRect.getAttribute('x') || '0')\n  const y = _parseFloat(svgRect.getAttribute('y') || '0')\n  const width = _parseFloat(svgRect.getAttribute('width') || '0')\n  const height = _parseFloat(svgRect.getAttribute('height') || '0')\n\n  // トランスフォーム\n  return adoptTransform(svgRect.getAttribute('transform'), [\n    geo.vec(x, y),\n    geo.vec(x + width, y),\n    geo.vec(x + width, y + height),\n    geo.vec(x, y + height),\n  ])\n}\n\n/**\n * ellipseタグを解析する\n * @param svgEllipse SVGのellipseタグDOM\n * @return 座標リスト\n */\nexport function parseEllipse(svgEllipse: SVGEllipseElement): IVec2[] {\n  const cx = _parseFloat(svgEllipse.getAttribute('cx') || '0')\n  const cy = _parseFloat(svgEllipse.getAttribute('cy') || '0')\n  const rx = _parseFloat(svgEllipse.getAttribute('rx') || '1')\n  const ry = _parseFloat(svgEllipse.getAttribute('ry') || '1')\n\n  // トランスフォーム\n  return adoptTransform(\n    svgEllipse.getAttribute('transform'),\n    geo.approximateArc(\n      rx,\n      ry,\n      0,\n      Math.PI * 2,\n      geo.vec(cx, cy),\n      0,\n      configs.ellipseSplitSize\n    )\n  )\n}\n\n/**\n * circleタグを解析する\n * @param svgCircle  SVGのcircleタグDOM\n * @return 座標リスト\n */\nexport function parseCircle(svgCircle: SVGCircleElement): IVec2[] {\n  const cx = _parseFloat(svgCircle.getAttribute('cx') || '0')\n  const cy = _parseFloat(svgCircle.getAttribute('cy') || '0')\n  const r = _parseFloat(svgCircle.getAttribute('r') || '1')\n\n  // トランスフォーム\n  return adoptTransform(\n    svgCircle.getAttribute('transform'),\n    geo.approximateArc(\n      r,\n      r,\n      0,\n      Math.PI * 2,\n      geo.vec(cx, cy),\n      0,\n      configs.ellipseSplitSize\n    )\n  )\n}\n\n/**\n * transformを行う\n * @param commandStr コマンド文字列\n * @param points 変換前座標リスト\n * @return 変形後座標リスト\n */\nexport function adoptTransform(\n  commandStr: string | null,\n  points: IVec2[]\n): IVec2[] {\n  if (!commandStr) return points\n\n  let ret: IVec2[] = geo.cloneVectors(points)\n  // 複数コマンドの場合もあるのでループ\n  const commandList = commandStr.split(/\\)/)\n  commandList.forEach((current) => {\n    const tmp = current.split(/\\(/)\n    if (tmp.length === 2) {\n      const command = tmp[0].trim().toLowerCase()\n      const params = parseNumbers(tmp[1])\n\n      switch (command) {\n        case 'matrix': {\n          ret = geo.transform(ret, params)\n          break\n        }\n        case 'translate': {\n          ret = ret.map((p) => geo.vec(p.x + params[0], p.y + params[1]))\n          break\n        }\n        case 'scale': {\n          const scaleX = params[0]\n          // XY等倍の場合を考慮\n          let scaleY = params[0]\n          if (params.length > 1) {\n            scaleY = params[1]\n          }\n          ret = ret.map((p) => geo.vec(p.x * scaleX, p.y * scaleY))\n          break\n        }\n        case 'rotate': {\n          // 回転基準点\n          let base: IVec2 = geo.vec(0, 0)\n          if (params.length > 2) {\n            base = geo.vec(params[1], params[2])\n          }\n          ret = ret.map((p) => geo.rotate(p, (params[0] * Math.PI) / 180, base))\n          break\n        }\n        case 'skewx': {\n          ret = ret.map((p) =>\n            geo.vec(p.x + Math.tan((params[0] * Math.PI) / 180) * p.y, p.y)\n          )\n          break\n        }\n        case 'skewy': {\n          ret = ret.map((p) =>\n            geo.vec(p.x, p.y + Math.tan((params[0] * Math.PI) / 180) * p.x)\n          )\n          break\n        }\n      }\n    }\n  })\n\n  return ret\n}\n\n// All commands (BbRr isn't supported)\nconst allCommand = /M|m|L|l|H|h|V|v|C|c|S|s|Q|q|T|t|A|a|Z|z/g\n\n/**\n * pathタグd属性文字列を分割する\n * @param dString pathのd要素文字列\n * @return コマンド単位の情報配列の配列\n */\nexport function splitD(dString: string): string[][] {\n  // 要素分割\n  const strList = dString\n    .replace(allCommand, ' $& ')\n    // Insert space before each signature, but don't destruct exponent exporession such as 2.2e-10.\n    .replace(/([^e])(-|\\+)/g, '$1 $2')\n    .split(/,| /)\n    .filter((str) => str)\n  // 直前のコマンド\n  let pastCommand = 'M'\n\n  const ret: string[][] = []\n  for (let i = 0; i < strList.length; ) {\n    const info: string[] = []\n    // Check if a command exists\n    if (strList[i].match(allCommand)) {\n      info.push(strList[i])\n      pastCommand = info[0]\n      i++\n    } else if (pastCommand.toUpperCase() !== 'Z') {\n      // Reuse previous command\n      // Avoid reusing 'Z' that can cause infinite loop\n      info.push(pastCommand)\n    }\n\n    switch (info[0].toUpperCase()) {\n      case 'Z':\n        break\n      case 'V':\n      case 'H':\n        info.push(strList[i])\n        i += 1\n        break\n      case 'M':\n      case 'L':\n      case 'T':\n        info.push(strList[i], strList[i + 1])\n        i += 2\n        break\n      case 'Q':\n      case 'S':\n        info.push(strList[i], strList[i + 1], strList[i + 2], strList[i + 3])\n        i += 4\n        break\n      case 'C':\n        info.push(\n          strList[i],\n          strList[i + 1],\n          strList[i + 2],\n          strList[i + 3],\n          strList[i + 4],\n          strList[i + 5]\n        )\n        i += 6\n        break\n      case 'A':\n        info.push(\n          strList[i],\n          strList[i + 1],\n          strList[i + 2],\n          strList[i + 3],\n          strList[i + 4],\n          strList[i + 5],\n          strList[i + 6]\n        )\n        i += 7\n        break\n      default:\n        throw getUnknownError()\n    }\n\n    ret.push(info)\n  }\n\n  return ret\n}\n\n/**\n * svg文字列を生成する\n * @param pathList path情報リスト\n * @return xml文字列\n */\nexport function serializeSvgString(pathList: ISvgPath[]): string {\n  const svg = serializeSvg(pathList)\n  const xmlSerializer = new XMLSerializer()\n  const textXml = xmlSerializer.serializeToString(svg)\n  return textXml\n}\n\n/**\n * svgタグを生成する\n * @param pathList path情報リスト\n * @return svgタグ\n */\nexport function serializeSvg(pathList: ISvgPath[]): SVGElement {\n  const dom = document.createElementNS(HTTP_SVG, 'svg')\n\n  // キャンバスサイズ\n  let width = 1\n  let height = 1\n\n  pathList.forEach((path) => {\n    dom.appendChild(serializePath(path.d, path.style))\n    path.d.forEach((p) => {\n      width = Math.max(width, p.x)\n      height = Math.max(height, p.y)\n    })\n  })\n\n  width *= 1.1\n  height *= 1.1\n\n  dom.setAttribute('width', `${width}`)\n  dom.setAttribute('height', `${height}`)\n\n  return dom\n}\n\n/**\n * pathタグを生成する\n * @param pointList 座標リスト\n * @param style スタイル情報\n * @return pathタグ\n */\nexport function serializePath(\n  pointList: IVec2[],\n  style: ISvgStyle\n): SVGPathElement {\n  const dom = document.createElementNS(HTTP_SVG, 'path')\n  dom.setAttribute('d', serializePointList(pointList))\n  dom.setAttribute('style', serializeStyle(style))\n  return dom\n}\n\n/**\n * 座標リストをd属性文字列に変換する\n * @param pointList 座標リスト\n * @param open 閉じないフラグ\n * @return d属性文字列\n */\nexport function serializePointList(pointList: IVec2[], open?: boolean): string {\n  if (pointList.length === 0) return ''\n  const [head, ...body] = pointList\n  return (\n    `M ${head.x},${head.y}` +\n    body.map((p) => ` L ${p.x},${p.y}`).join('') +\n    (open ? '' : ' Z')\n  )\n}\n\n/**\n * デフォルトstyle作成\n * @return スタイルオブジェクト\n */\nexport function createStyle() {\n  return {\n    fill: false,\n    fillGlobalAlpha: 1,\n    fillStyle: '',\n    lineCap: 'butt',\n    lineDash: [],\n    lineJoin: 'bevel',\n    lineWidth: 1,\n    stroke: false,\n    strokeGlobalAlpha: 1,\n    strokeStyle: '',\n  }\n}\n\n/**\n * pathタグのスタイルを取得する\n * @param svgPath SVGのpathタグDOM\n * @return スタイルオブジェクト\n */\nexport function parseTagStyle(svgPath: SVGElement): ISvgStyle {\n  // スタイル候補要素リスト\n  const styleObject: { [key: string]: string } = {}\n\n  svgPath.getAttributeNames().forEach((name) => {\n    const attr = svgPath.getAttributeNode(name)\n    if (!attr) return\n    styleObject[attr.name] = attr.value\n  })\n\n  const styleAttr = svgPath.getAttributeNode('style')\n  if (styleAttr) {\n    // style要素から取得\n    const styleStr = styleAttr.value\n    styleStr.split(';').forEach((elem: string) => {\n      const splited = elem.split(':')\n      if (splited.length !== 2) return\n      styleObject[splited[0].trim()] = splited[1].trim()\n    })\n  }\n\n  return Object.entries(styleObject).reduce<ISvgStyle>((ret, [key, val]) => {\n    switch (key.toLowerCase()) {\n      case 'fill':\n        if (val === 'none') {\n          ret.fillStyle = ''\n          ret.fill = false\n        } else {\n          ret.fillStyle = val\n          ret.fill = true\n        }\n        break\n      case 'stroke':\n        if (val === 'none') {\n          ret.strokeStyle = ''\n          ret.stroke = false\n        } else {\n          ret.strokeStyle = val\n          ret.stroke = true\n        }\n        break\n      case 'stroke-width':\n        ret.lineWidth = _parseFloat(val)\n        break\n      case 'stroke-opacity':\n        ret.strokeGlobalAlpha = _parseFloat(val)\n        break\n      case 'fill-opacity':\n        ret.fillGlobalAlpha = _parseFloat(val)\n        break\n      case 'stroke-linecap':\n        ret.lineCap = val\n        break\n      case 'stroke-linejoin':\n        ret.lineJoin = val\n        break\n      case 'stroke-dasharray':\n        if (val.toLowerCase() === 'none') {\n          ret.lineDash = []\n        } else {\n          ret.lineDash = parseNumbers(val)\n        }\n        break\n      default:\n        // 無視\n        break\n    }\n\n    return ret\n  }, createStyle())\n}\n\n/**\n * スタイル情報をstyle属性文字列に変換する\n * @method serializeStyle\n * @param style スタイル情報\n * @return style属性文字列\n */\nexport function serializeStyle(style: ISvgStyle) {\n  let ret = ''\n\n  // fill情報\n  if (!style.fill) {\n    ret += 'fill:none;'\n  } else {\n    ret += 'fill:' + style.fillStyle + ';'\n  }\n  if (style.fillGlobalAlpha) {\n    ret += 'fill-opacity:' + style.fillGlobalAlpha + ';'\n  }\n\n  // stroke情報\n  if (!style.stroke) {\n    ret += 'stroke:none;'\n  } else {\n    ret += 'stroke:' + style.strokeStyle + ';'\n  }\n  if (style.lineWidth) {\n    ret += 'stroke-width:' + style.lineWidth + ';'\n  }\n  if (style.strokeGlobalAlpha) {\n    ret += 'stroke-opacity:' + style.strokeGlobalAlpha + ';'\n  }\n  if (style.lineCap) {\n    ret += 'stroke-linecap:' + style.lineCap + ';'\n  }\n  if (style.lineJoin) {\n    ret += 'stroke-linejoin:' + style.lineJoin + ';'\n  }\n  if (style.lineDash) {\n    if (style.lineDash.length > 0) {\n      ret += 'stroke-dasharray:' + style.lineDash.join(',') + ';'\n    } else {\n      ret += 'stroke-dasharray:none;'\n    }\n  }\n\n  return ret\n}\n\n/**\n * パス分割\n * @param path 対象パス\n * @param line 分割線\n * @return 分割後のパスリスト\n */\nexport function splitPath(path: ISvgPath, line: IVec2[]): ISvgPath[] {\n  let splited = geo.splitPolyByLine(path.d, line)\n  if (splited.length < 2) return [path]\n\n  // 本体と回転方向が一致しているかで分類\n  const rootLoopwise = geo.getLoopwise(path.d)\n  const sameLoopwiseList: IVec2[][] = []\n  const oppositeLoopwiseList: IVec2[][] = []\n  if (path.included) {\n    path.included.forEach((s) => {\n      if (geo.getLoopwise(s) === rootLoopwise) {\n        sameLoopwiseList.push(s)\n      } else {\n        oppositeLoopwiseList.push(s)\n      }\n    })\n  }\n\n  // 本体と同回転のものはそのまま分割\n  sameLoopwiseList.forEach((poly) => {\n    const sp = geo.splitPolyByLine(poly, line)\n    splited = [...splited, ...(sp.length > 0 ? sp : [poly])]\n  })\n\n  // 本体と逆回転のものは特殊処理\n  const notPolyList: IVec2[][] = []\n  oppositeLoopwiseList.forEach((poly) => {\n    const sp = geo.splitPolyByLine(poly, line)\n    if (sp.length > 0) {\n      // 分割されたらブーリアン差をとるために集める\n      notPolyList.push(poly)\n    } else {\n      // 分割なしならそのまま\n      splited.push(poly)\n    }\n  })\n\n  // 切断されたくり抜き領域を差し引いたポリゴンを生成\n  const splitedAfterNot = splited.map((s) =>\n    notPolyList.reduce((p, c) => geo.getPolygonNotPolygon(p, c), s)\n  )\n\n  return geo.getIncludedPolygonGroups(splitedAfterNot).map((group) => {\n    const [d, ...included] = group\n    return { d: d, included, style: path.style }\n  })\n}\n\n/**\n * ポリゴンリストをグルーピングしたパスリストに変換する\n * @param polygons ポリゴンリスト\n * @param style パススタイル\n * @return パスリスト\n */\nexport function getGroupedPathList(\n  polygons: IVec2[][],\n  style: ISvgStyle = createStyle()\n): ISvgPath[] {\n  return geo.getIncludedPolygonGroups(polygons).map((group) => {\n    const [d, ...included] = group\n    return { d, included, style }\n  })\n}\n\n/**\n * convert affine matrix to transform attribute value\n * @param matrix affine matrix\n * @return transform attribute value\n */\nexport function affineToTransform(matrix: AffineMatrix): string {\n  return `matrix(${matrix.join(',')})`\n}\n\n/**\n * parse transform attribute value as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseTransform(transformStr: string): AffineMatrix {\n  const transformStrList = transformStr.split(')').map((s) => `${s})`)\n  const affines = transformStrList.map((str) => parseUnitTransform(str))\n  return geo.multiAffines(affines)\n}\n\nfunction parseUnitTransform(str: string): AffineMatrix {\n  if (/translateX/.test(str)) return parseTranslateX(str)\n  if (/translateY/.test(str)) return parseTranslateY(str)\n  if (/translate/.test(str)) return parseTranslate(str)\n  if (/skewX/.test(str)) return parseSkewX(str)\n  if (/skewY/.test(str)) return parseSkewY(str)\n  if (/scaleX/.test(str)) return parseScaleX(str)\n  if (/scaleY/.test(str)) return parseScaleY(str)\n  if (/scale/.test(str)) return parseScale(str)\n  if (/rotate/.test(str)) return parseRotate(str)\n  if (/matrix/.test(str)) return parseMatrix(str)\n  return [...geo.IDENTITY_AFFINE]\n}\n\nfunction parseNumbers(str: string): number[] {\n  const list = str.trim().replace(/,/g, ' ').split(/ +/)\n  return list.map((s) => _parseFloat(s))\n}\n\n/**\n * parse transform attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseTranslate(str: string): AffineMatrix {\n  const splited = str.match(/translate\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else if (numbers.length === 1) {\n    return [1, 0, 0, 1, numbers[0], 0]\n  } else {\n    return [1, 0, 0, 1, numbers[0], numbers[1]]\n  }\n}\n\n/**\n * parse translateX attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseTranslateX(str: string): AffineMatrix {\n  const splited = str.match(/translateX\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else {\n    return [1, 0, 0, 1, numbers[0], 0]\n  }\n}\n\n/**\n * parse translateY attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseTranslateY(str: string): AffineMatrix {\n  const splited = str.match(/translateY\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else {\n    return [1, 0, 0, 1, 0, numbers[0]]\n  }\n}\n\n/**\n * parse skewX attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseSkewX(str: string): AffineMatrix {\n  const splited = str.match(/skewX\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else {\n    return [1, 0, Math.tan((numbers[0] * Math.PI) / 180), 1, 0, 0]\n  }\n}\n\n/**\n * parse skewY attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseSkewY(str: string): AffineMatrix {\n  const splited = str.match(/skewY\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else {\n    return [1, Math.tan((numbers[0] * Math.PI) / 180), 0, 1, 0, 0]\n  }\n}\n\n/**\n * parse transform attribute value of scale as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseScale(str: string): AffineMatrix {\n  const splited = str.match(/scale\\((.+)\\)/)\n  if (!splited || splited.length < 2) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else if (numbers.length === 1) {\n    return [numbers[0], 0, 0, numbers[0], 0, 0]\n  } else {\n    return [numbers[0], 0, 0, numbers[1], 0, 0]\n  }\n}\n\n/**\n * parse ScaleX attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseScaleX(str: string): AffineMatrix {\n  const splited = str.match(/scaleX\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else {\n    return [numbers[0], 0, 0, 1, 0, 0]\n  }\n}\n\n/**\n * parse ScaleY attribute value of translate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseScaleY(str: string): AffineMatrix {\n  const splited = str.match(/scaleY\\((.+)\\)/)\n  if (!splited || splited.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 1) {\n    return [...geo.IDENTITY_AFFINE]\n  } else {\n    return [1, 0, 0, numbers[0], 0, 0]\n  }\n}\n\n/**\n * parse transform attribute value of rotate as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseRotate(str: string): AffineMatrix {\n  const splited = str.match(/rotate\\((.+)\\)/)\n  if (!splited || splited.length < 2) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (parseNumbers.length < 1) return [...geo.IDENTITY_AFFINE]\n\n  const rad = (numbers[0] / 180) * Math.PI\n  const cos = Math.cos(rad)\n  const sin = Math.sin(rad)\n  const rot: AffineMatrix = [cos, sin, -sin, cos, 0, 0]\n\n  if (numbers.length > 2) {\n    return geo.multiAffine(\n      geo.multiAffine([1, 0, 0, 1, numbers[1], numbers[2]], rot),\n      [1, 0, 0, 1, -numbers[1], -numbers[2]]\n    )\n  } else {\n    return rot\n  }\n}\n\n/**\n * parse transform attribute value of matrix as affine matrix\n * @param transform attribute value\n * @return transform value\n */\nexport function parseMatrix(str: string): AffineMatrix {\n  const splited = str.match(/matrix\\((.+)\\)/)\n  if (!splited || splited.length < 2) return [...geo.IDENTITY_AFFINE]\n\n  const numbers = parseNumbers(splited[1])\n  if (numbers.length < 5) return [...geo.IDENTITY_AFFINE]\n\n  return numbers.slice(0, 6) as AffineMatrix\n}\n\nfunction getUnknownError(): Error {\n  return new Error(`Unexpected error`)\n}\n","import * as geo from '../src/geo'\nimport * as svg from '../src/svg'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\nconst ctx = canvas.getContext('2d')\nconst fileInput = document.getElementById('input') as HTMLInputElement\nfileInput.onchange = (e) => {\n  const file = (e.target as HTMLInputElement).files\n  if (!file || file.length === 0) return\n\n  const reader = new FileReader()\n  reader.readAsText(file[0])\n  reader.onload = () => {\n    if (!ctx) return\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    const pathInfoList = svg.parseSvgGraphicsStr(reader.result as string)\n    const inRectList = svg.fitRect(\n      pathInfoList,\n      0,\n      0,\n      canvas.width,\n      canvas.height\n    )\n    inRectList.forEach((info) => {\n      geo.triangleSplit(info.d).forEach((points) => {\n        svg.draw(ctx, { d: points, style: info.style })\n      })\n    })\n  }\n}\n\nfunction runReverse() {\n  const text = (document.getElementById('input-path') as HTMLInputElement)!\n    .value\n  ;(document.getElementById('reverse-result') as HTMLInputElement)!.value =\n    svg.pathSegmentRawsToString(svg.reversePath(svg.parsePathSegmentRaws(text)))\n\n  document.getElementById('path-src')!.setAttribute('d', text)\n  document\n    .getElementById('path-dist')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(\n        svg.reversePath(svg.parsePathSegmentRaws(text))\n      )\n    )\n}\nrunReverse()\ndocument.getElementById('run-reverse')!.addEventListener('click', runReverse)\n\nfunction runModify() {\n  const text = (document.getElementById('input-path2') as HTMLInputElement)!\n    .value\n\n  document.getElementById('path-src2')!.setAttribute('d', text)\n  const segs = svg.parsePathSegmentRaws(text)\n  document\n    .getElementById('path-dist2')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.slidePath(segs, { x: 30, y: 30 }))\n    )\n  document\n    .getElementById('path-dist3')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.scalePath(segs, { x: -1, y: 1 }))\n    )\n  document\n    .getElementById('path-dist4')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.scalePath(segs, { x: 1, y: -1 }))\n    )\n  document\n    .getElementById('path-dist5')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.scalePath(segs, { x: -1, y: -1 }))\n    )\n}\nrunModify()\ndocument.getElementById('run-modify')!.addEventListener('click', runModify)\n\nfunction runRotate() {\n  const text = (document.getElementById('input-rotate') as HTMLInputElement)!\n    .value\n\n  document.getElementById('rotate-src2')!.setAttribute('d', text)\n  const segs = svg.parsePathSegmentRaws(text)\n  document\n    .getElementById('rotate-dist2')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.rotatePath(segs, (2 * Math.PI) / 5))\n    )\n  document\n    .getElementById('rotate-dist3')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.rotatePath(segs, (2 * (Math.PI * 2)) / 5))\n    )\n  document\n    .getElementById('rotate-dist4')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.rotatePath(segs, (2 * (Math.PI * 3)) / 5))\n    )\n  document\n    .getElementById('rotate-dist5')!\n    .setAttribute(\n      'd',\n      svg.pathSegmentRawsToString(svg.rotatePath(segs, (2 * (Math.PI * 4)) / 5))\n    )\n}\nrunRotate()\ndocument.getElementById('run-rotate')!.addEventListener('click', runRotate)\n"]}