{"version":3,"sources":["geo.ts","okageo.ts"],"names":[],"mappings":"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","file":"okageo.map","sourceRoot":"../src","sourcesContent":["export const MINVALUE: number = 0.000001\n\nexport function add (a: IVec2, b: IVec2): IVec2 {\n  return { x: a.x + b.x, y: a.y + b.y }\n}\n\nexport function sub (a: IVec2, b: IVec2): IVec2 {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nexport function multi (a: IVec2, b: number): IVec2 {\n  return { x: a.x * b, y: a.y * b }\n}\n\nexport function isSame (a: IVec2, b: IVec2): boolean {\n  const dif: IVec2 = sub(a, b)\n  return (Math.abs(dif.x) < MINVALUE) && (Math.abs(dif.y) < MINVALUE)\n}\n\nexport function getDistance (a: IVec2, b: IVec2): number {\n  const dif: IVec2 = sub(a, b)\n  return Math.sqrt(dif.x * dif.x + dif.y * dif.y)\n}\n\nexport function getNorm (a: IVec2): number {\n  return getDistance(a, { x: 0, y: 0 })\n}\n\nexport function isZero (a: IVec2): boolean {\n  return getNorm(a) < MINVALUE\n}\n\nexport function getUnit (a: IVec2): IVec2 {\n  const d = getNorm(a)\n  if (d < MINVALUE) throw new Error('cannot get unit vector of zero vector')\n  return multi(a, 1 / d)\n}\n\nexport function getCross (a: IVec2, b: IVec2): number {\n  return a.x * b.y - a.y * b.x\n}\n\nexport function getInner (a: IVec2, b: IVec2): number {\n  return a.x * b.x + a.y * b.y\n}\n\nexport function cloneVectors (vectors: IVec2[]): IVec2[] {\n  return vectors.map((v) => ({ ...v }))\n}\n\nexport function getCenter (a: IVec2, b: IVec2): IVec2 {\n  return multi(add(a, b), 1 / 2)\n}\n\nexport function getRadian (a: IVec2, from: IVec2 = { x: 0, y: 0 }): number {\n  const dif = sub(a, from)\n  return Math.atan2(dif.y, dif.x)\n}\n\n/**\n * fromに対して、aと点対称なベクトル取得\n * @param a 対象ベクトル\n * @param from 基点\n * @param 点対称ベクトル\n */\nexport function getSymmetry (a: IVec2, from: IVec2 = { x: 0, y: 0 }): IVec2 {\n  return add(multi(sub(from, a), 2), a)\n}\n\n/**\n * fromに対して、aからradian回転したベクトル取得\n * @param a 対象ベクトル\n * @param radian 回転ラジアン\n * @param from 基点\n * @param 回転後のベクトル\n */\nexport function rotate (a: IVec2, radian: number, from: IVec2 = { x: 0, y: 0 }): IVec2 {\n  const fromBase: IVec2 = sub(a, from)\n  return add({\n    x: Math.cos(radian) * fromBase.x - Math.sin(radian) * fromBase.y,\n    y: Math.sin(radian) * fromBase.x + Math.cos(radian) * fromBase.y\n  }, from)\n}\n\n/**\n * 2次方程式の解の公式\n * a * x^2 + b * x + c = 0\n * 解に虚数が含まれる場合は解なし扱い\n * @param a x^2の係数\n * @param b xの係数\n * @param c 定数\n * @return 解の配列\n */\nexport function solveEquationOrder2 (a: number, b: number, c: number): number[] {\n  if (a === 0) {\n    return b === 0 ? [] : [-c / b]\n  }\n\n  const d = b * b - 4 * a * c\n  if (d < 0) {\n    return []\n  }\n\n  const ia = 0.5 / a\n\n  if (d === 0) {\n    return [-b * ia]\n  }\n\n  const sd = Math.sqrt(d)\n  return [(-b + sd) * ia, (-b - sd) * ia]\n}\n\n/**\n * 点から直線への垂線の足\n * @param p 対象の点\n * @param line 直線\n * @return 垂線の足\n */\nexport function getPedal (p: IVec2, line: IVec2[]): IVec2 {\n  if (line.length !== 2) throw new Error('line must be length = 2')\n  const s = line[0]\n  const t = line[1]\n  const vecST = sub(t, s)\n  const vecSP = sub(p, s)\n  const inner = getInner(vecST, vecSP)\n  const rate = inner / getInner(vecST, vecST)\n  return add(s, multi(vecST, rate))\n}\n","import * as geo from './geo'\n\nexport default {\n  geo\n}\n"]}