{"version":3,"sources":["geo.ts","okageo.ts"],"names":[],"mappings":"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","file":"okageo.map","sourceRoot":"../src","sourcesContent":["import { IVec2 } from '../types/index'\n\nexport const MINVALUE: number = 0.000001\n\nexport function add (a: IVec2, b: IVec2): IVec2 {\n  return { x: a.x + b.x, y: a.y + b.y }\n}\n\nexport function sub (a: IVec2, b: IVec2): IVec2 {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nexport function multi (a: IVec2, b: number): IVec2 {\n  return { x: a.x * b, y: a.y * b }\n}\n\nexport function isSame (a: IVec2, b: IVec2): boolean {\n  const dif: IVec2 = sub(a, b)\n  return (Math.abs(dif.x) < MINVALUE) && (Math.abs(dif.y) < MINVALUE)\n}\n\nexport function getDistance (a: IVec2, b: IVec2): number {\n  const dif: IVec2 = sub(a, b)\n  return Math.sqrt(dif.x * dif.x + dif.y * dif.y)\n}\n\nexport function getNorm (a: IVec2): number {\n  return getDistance(a, { x: 0, y: 0 })\n}\n\nexport function isZero (a: IVec2): boolean {\n  return getNorm(a) < MINVALUE\n}\n\nexport function getUnit (a: IVec2): IVec2 {\n  const d = getNorm(a)\n  if (d < MINVALUE) throw new Error('cannot get unit vector of zero vector')\n  return multi(a, 1 / d)\n}\n\nexport function getCross (a: IVec2, b: IVec2): number {\n  return a.x * b.y - a.y * b.x\n}\n\nexport function getInner (a: IVec2, b: IVec2): number {\n  return a.x * b.x + a.y * b.y\n}\n\nexport function cloneVectors (vectors: IVec2[]): IVec2[] {\n  return vectors.map((v) => ({ ...v }))\n}\n\nexport function getCenter (a: IVec2, b: IVec2): IVec2 {\n  return multi(add(a, b), 1 / 2)\n}\n\nexport function getRadian (a: IVec2, from: IVec2 = { x: 0, y: 0 }): number {\n  const dif = sub(a, from)\n  return Math.atan2(dif.y, dif.x)\n}\n\n/**\n * fromに対して、aと点対称なベクトル取得\n * @param a 対象ベクトル\n * @param from 基点\n * @param 点対称ベクトル\n */\nexport function getSymmetry (a: IVec2, from: IVec2 = { x: 0, y: 0 }): IVec2 {\n  return add(multi(sub(from, a), 2), a)\n}\n\n/**\n * fromに対して、aからradian回転したベクトル取得\n * @param a 対象ベクトル\n * @param radian 回転ラジアン\n * @param from 基点\n * @param 回転後のベクトル\n */\nexport function rotate (a: IVec2, radian: number, from: IVec2 = { x: 0, y: 0 }): IVec2 {\n  const fromBase: IVec2 = sub(a, from)\n  return add({\n    x: Math.cos(radian) * fromBase.x - Math.sin(radian) * fromBase.y,\n    y: Math.sin(radian) * fromBase.x + Math.cos(radian) * fromBase.y\n  }, from)\n}\n\n/**\n * 2次方程式の解の公式\n * a * x^2 + b * x + c = 0\n * 解に虚数が含まれる場合は解なし扱い\n * @param a x^2の係数\n * @param b xの係数\n * @param c 定数\n * @return 解の配列\n */\nexport function solveEquationOrder2 (a: number, b: number, c: number): number[] {\n  if (a === 0) {\n    return b === 0 ? [] : [-c / b]\n  }\n\n  const d = b * b - 4 * a * c\n  if (d < 0) {\n    return []\n  }\n\n  const ia = 0.5 / a\n\n  if (d === 0) {\n    return [-b * ia]\n  }\n\n  const sd = Math.sqrt(d)\n  return [(-b + sd) * ia, (-b - sd) * ia]\n}\n\n/**\n * 点から直線への垂線の足\n * @param p 対象の点\n * @param line 直線\n * @return 垂線の足\n */\nexport function getPedal (p: IVec2, line: IVec2[]): IVec2 {\n  if (line.length !== 2) throw new Error('line must be length = 2')\n  const s = line[0]\n  const t = line[1]\n  const vecST = sub(t, s)\n  const vecSP = sub(p, s)\n  const inner = getInner(vecST, vecSP)\n  const rate = inner / getInner(vecST, vecST)\n  return add(s, multi(vecST, rate))\n}\n\n/**\n * 2次ベジェ曲線と直線の当たり判定用パラメータを取得する\n * @param p0 ベジェ曲線始点\n * @param p1 ベジェ曲線制御点\n * @param p2 ベジェ曲線終点\n * @param p 直線始点\n * @param q 直線終点\n * @return ベジェ曲線パラメータ配列\n */\nfunction rayToBezier (p0: IVec2, p1: IVec2, p2: IVec2, p: IVec2, q: IVec2): number[] {\n  const vx: number = q.x - p.x\n  const vy: number = q.y - p.y\n  const a: number = p0.x - 2 * p1.x + p2.x\n  const b: number = 2 * (p1.x - p0.x)\n  const c: number = p0.x\n  const d: number = p0.y - 2 * p1.y + p2.y\n  const e: number = 2 * (p1.y - p0.y)\n  const f: number = p0.y\n\n  return solveEquationOrder2(\n    a * vy - vx * d,\n    b * vy - vx * e,\n    vy * c - vy * p.x - vx * f + vx * p.y\n  )\n}\n\n/**\n * 2次ベジェ曲「線分」と「直線」の交点を取得する\n * @method crossLineAndBezier\n * @param p0 ベジェ曲線始点\n * @param p1 ベジェ曲線制御点\n * @param p2 ベジェ曲線終点\n * @param p 直線始点\n * @param q 直線終点\n * @return 交点リスト\n */\nexport function getCrossLineAndBezier (p0: IVec2, p1: IVec2, p2: IVec2, p: IVec2, q: IVec2) {\n  return rayToBezier(p0, p1, p2, p, q)\n    .filter((t) => 0 <= t && t <= 1)\n    .map((t) => ({\n      x: (p2.x - 2 * p1.x + p0.x) * t * t + 2 * (p1.x - p0.x) * t + p0.x,\n      y: (p2.y - 2 * p1.y + p0.y) * t * t + 2 * (p1.y - p0.y) * t + p0.y\n    }))\n}\n\n/**\n * 線分と線分の交差判定\n * @param seg1 線分1\n * @param seg2 線分2\n * @return 交差しているフラグ\n */\nexport function isCrossSegAndSeg (seg1: IVec2[], seg2: IVec2[]): boolean {\n  const ax = seg1[0].x\n  const ay = seg1[0].y\n  const bx = seg1[1].x\n  const by = seg1[1].y\n  const cx = seg2[0].x\n  const cy = seg2[0].y\n  const dx = seg2[1].x\n  const dy = seg2[1].y\n  const ta = (cx - dx) * (ay - cy) + (cy - dy) * (cx - ax)\n  const tb = (cx - dx) * (by - cy) + (cy - dy) * (cx - bx)\n  const tc = (ax - bx) * (cy - ay) + (ay - by) * (ax - cx)\n  const td = (ax - bx) * (dy - ay) + (ay - by) * (ax - dx)\n  return tc * td < 0 && ta * tb < 0\n}\n\n/**\n * 平行判定\n * @param a ベクトル or 2点の配列\n * @param b 同上\n * @return 平行であるフラグ\n */\nexport function isParallel (a: IVec2, b: IVec2): boolean {\n  const cross = getCross(a, b)\n  return Math.abs(cross) < MINVALUE\n}\n\n/**\n * 点が直線上にあるか判定\n * @param p 点\n * @param line 直線\n * @return 直線上にあるフラグ\n */\nexport function isOnLine (p: IVec2, line: IVec2[]): boolean {\n  return isZero(sub(p, getPedal(p, line)))\n}\n\n/**\n * 線分と直線の交点取得\n * @param seg 線分\n * @param line 直線\n * @return 交点\n */\nexport function getCrossSegAndLine (seg: IVec2[], line: IVec2[]): IVec2 | null {\n  if (isParallel(sub(seg[0], seg[1]), sub(line[0], line[1]))) return null\n  if (isOnLine(seg[0], line)) return { ...seg[0] }\n  if (isOnLine(seg[1], line)) return { ...seg[1] }\n\n  const s1 = ((line[1].x - line[0].x) * (seg[0].y - line[0].y) - (line[1].y - line[0].y) * (seg[0].x - line[0].x)) / 2\n  const s2 = ((line[1].x - line[0].x) * (line[0].y - seg[1].y) - (line[1].y - line[0].y) * (line[0].x - seg[1].x)) / 2\n  const rate = s1 / (s1 + s2)\n  const isExistCorss = 0 < rate && rate < 1\n\n  return isExistCorss ? {\n    x: seg[0].x + (seg[1].x - seg[0].x) * rate,\n    y: seg[0].y + (seg[1].y - seg[0].y) * rate\n  } : null\n}\n\n/**\n * 同一線分かを判定する\n * @param ab 線分ab\n * @param cd 線分cd\n * @return 同一であるフラグ\n */\nexport function isSameSeg (ab: IVec2[], cd: IVec2[]): boolean {\n  if (isSame(ab[0], cd[0]) && isSame(ab[1], cd[1])) return true\n  if (isSame(ab[0], cd[1]) && isSame(ab[1], cd[0])) return true\n  return false\n}\n\n/**\n * ポリゴンを直線で分割する\n * @param pol 面\n * @param line 直線\n * @return 分割された点配列の配列\n */\nexport function splitPolyByLine (pol: IVec2[], line: IVec2[]): IVec2[][] {\n  let points: IVec2[] = []\n  let crossIndex: number[] = []\n  let crossList: IVec2[] = []\n\n  pol.forEach((p, i) => {\n    const targetLine = [p, pol[(i + 1) % pol.length]]\n    const cross = getCrossSegAndLine(targetLine, line)\n    points.push(p)\n    if (cross) {\n      points.push(cross)\n      crossIndex.push(i + 1 + crossIndex.length)\n      crossList.push(cross)\n    }\n  })\n\n  if (crossIndex.length % 2 !== 0) return []\n\n  // 近い順に並べる -> 直線をx軸と重なるよう回転してx座標で比較\n  const rad: number = getRadian(line[0], line[1])\n  crossList.sort((a, b) => rotate(a, -rad).x - rotate(b, -rad).x)\n\n  // 面の辺と同一ではないものを採用\n  let targetSection: IVec2[] = []\n  for (let k = 0; k < crossList.length - 1; k += 2) {\n    const section = [crossList[k], crossList[k + 1]]\n    let sameSeg = false\n    for (let l = 0; l < pol.length; l++) {\n      if (isSameSeg(section, [pol[l], pol[(l + 1) % pol.length]])) {\n        sameSeg = true\n        break\n      }\n    }\n\n    if (!sameSeg) {\n      targetSection = section\n      break\n    }\n  }\n\n  if (targetSection.length !== 2) return []\n\n  // 除外対象回収\n  const dropList = crossList.concat()\n  let tmpIndex = dropList.indexOf(targetSection[0])\n  if (tmpIndex !== -1) {\n    dropList.splice(tmpIndex, 1)\n  }\n  tmpIndex = dropList.indexOf(targetSection[1])\n  if (tmpIndex !== -1) {\n    dropList.splice(tmpIndex, 1)\n  }\n  const tmpList = points.concat()\n  dropList.forEach((p) => {\n    const i = tmpList.indexOf(p)\n    tmpList.splice(i, 1)\n  })\n\n  points = tmpList\n  crossList = targetSection\n\n  const i0 = points.indexOf(crossList[0])\n  const i1 = points.indexOf(crossList[1])\n\n  if (i0 === -1 || i1 === -1) return []\n\n  crossIndex = []\n  crossIndex[0] = Math.min(i0, i1)\n  crossIndex[1] = Math.max(i0, i1)\n\n  // 分割ポリゴンを拾い集める\n  const splitedPolygons = []\n\n  // 1つ目\n  let splitPol = []\n  // 交点まで追加\n  for (let i = 0; i <= crossIndex[0]; i++) {\n    splitPol.push({\n      x: points[i].x,\n      y: points[i].y\n    })\n  }\n  // 交点から追加\n  for (let i = crossIndex[1]; i < points.length; i++) {\n    splitPol.push({\n      x: points[i].x,\n      y: points[i].y\n    })\n  }\n  // 確定\n  splitedPolygons.push(splitPol)\n\n  // 2つ目\n  splitPol = []\n  // 交点から交点まで追加\n  for (let i = crossIndex[0]; i <= crossIndex[1]; i++) {\n    splitPol.push({\n      x: points[i].x,\n      y: points[i].y\n    })\n  }\n  // 確定\n  splitedPolygons.push(splitPol)\n\n  // 再帰的に分割\n  const recursiveResult: IVec2[][] = []\n  splitedPolygons.forEach((polygon) => {\n    const splited = splitPolyByLine(polygon, line)\n    if (splited.length === 0) {\n      recursiveResult.push(polygon)\n    } else {\n      recursiveResult.push(splited[0])\n      recursiveResult.push(splited[1])\n    }\n  })\n\n  return recursiveResult\n}\n\n/**\n * 三角分割\n * @param polygon 面\n * @return 分割面リスト\n */\nexport function triangleSplit (polygon: IVec2[]): IVec2[][] {\n  // 時計周りに揃える\n  polygon = convertLoopwise(polygon)\n\n  // ポリゴン複製\n  const targetPoly = omitSamePoint(polygon)\n\n  // 最遠点のインデックス\n  let farthestIndex = 0\n  // 現在の最遠点と前後点で作った三角形の外積\n  let currentCross = 0\n  // 分割後の面リスト\n  const triangleList = []\n\n      // ループ\n  while (targetPoly.length >= 3) {\n    // 最遠点インデックス取得\n    const sorted = targetPoly.concat()\n    sorted.sort((a, b) => {\n      return getNorm(b) - getNorm(a)\n    })\n    farthestIndex = targetPoly.indexOf(sorted[0])\n\n    // 分割実行\n    let tri = getTriangle(targetPoly, farthestIndex)\n    if (!tri) {\n      // 最遠点では失敗\n      const size = targetPoly.length\n      // 外積計算\n      const pa = sub(targetPoly[(farthestIndex + 1) % size], targetPoly[farthestIndex])\n      const pb = sub(targetPoly[(farthestIndex - 1 < 0) ? size - 1 : farthestIndex - 1], targetPoly[farthestIndex])\n\n      currentCross = getCross(pa, pb)\n\n      let index = farthestIndex\n      // 最遠点以外で探す\n      while (!tri) {\n        index = (index + 1) % size\n        // 最遠点の外積と同じ符号かを判定\n        const v1 = sub(targetPoly[(index + 1) % size], targetPoly[index])\n        const v2 = sub(targetPoly[(index - 1 < 0) ? size - 1 : index - 1], targetPoly[index])\n        const tmpCross = getCross(v1, v2)\n        if (tmpCross * currentCross > 0) {\n              // 判定続行\n          tri = getTriangle(targetPoly, index)\n        }\n        if (index === farthestIndex) {\n          throw new Error('failed to split triangles')\n        }\n      }\n\n      // 採用された点を削除\n      targetPoly.splice(index, 1)\n    } else {\n      // 最遠点削除\n      targetPoly.splice(farthestIndex, 1)\n    }\n    triangleList.push(tri)\n  }\n  return triangleList\n}\n\n/**\n * 面から三角形を取得する\n * @param polygon 面\n * @param index このインデックスの点とその両側の点で三角形を作る\n * @return 三角形、内部に入り込む点がある場合はnull\n */\nfunction getTriangle (polygon: IVec2[], index: number): IVec2[] | null {\n  // indexとその前後点で三角形作成\n  const size = polygon.length\n  const p0 = polygon[index]\n  const p1 = polygon[(index + 1) % size]\n  const p2 = polygon[(index - 1 < 0) ? size - 1 : index - 1]\n\n  const tri: IVec2[] = [p0, p1, p2]\n\n  // 内部に点が入り込まないか判定\n  let invalid: boolean = false\n  polygon.some((p) => {\n    if (p !== p0 && p !== p1 && p !== p2) {\n      if (isPointOnTriangle(tri, p)) {\n            // 失敗\n        invalid = true\n      }\n    }\n    return invalid\n  })\n\n  return invalid ? null : tri\n}\n\n/**\n * 点が三角形内にあるかを判定する\n * 境界も含む\n * @param tri 三角形\n * @param p 点\n * @return 内部にあるフラグ\n */\nexport function isPointOnTriangle (tri: IVec2[], p: IVec2): boolean {\n  // 三角形の3つのベクトル\n  const ab = sub(tri[1], tri[0])\n  const bc = sub(tri[2], tri[1])\n  const ca = sub(tri[0], tri[2])\n\n  // 三角形の各点からpへのベクトル\n  const ap = sub(p, tri[0])\n  const bp = sub(p, tri[1])\n  const cp = sub(p, tri[2])\n\n  // 外積を求める\n  const crossABP = getCross(ab, bp)\n  const crossBCP = getCross(bc, cp)\n  const crossCAP = getCross(ca, ap)\n\n  // 外積の符号が全て同じなら内部にある\n  // 0も含む→境界も含む\n  if ((crossABP >= 0 && crossBCP >= 0 && crossCAP >= 0) ||\n        (crossABP <= 0 && crossBCP <= 0 && crossCAP <= 0)) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * 面を時計回りに変換する\n * @param {vector[]} 面\n * @return 時計回りにした面(引数とは別配列にする)\n */\nexport function convertLoopwise (polygon: IVec2[]): IVec2[] {\n  const ret = polygon.concat()\n  if (getLoopwise(polygon) === -1) {\n    ret.reverse()\n  }\n  return ret\n}\n\n/**\n * 面の座標が時計回りかを判定する\n * @param polygon 面\n * @return -1:反時計 0:不定 1:時計\n */\nexport function getLoopwise (polygon: IVec2[]): number {\n  const area = getArea(polygon, true)\n  if (area > 0) return 1\n  if (area < 0) return -1\n  return 0\n}\n\n/**\n * 面積取得\n * @param polygon 面\n * @param allowNegative 負値を許すフラグ\n * @return 面積\n */\nexport function getArea (polygon: IVec2[], allowNegative: boolean = false): number {\n  if (polygon.length < 3) return 0\n\n  let area = 0\n  const size = polygon.length\n  for (let i = 0; i < size - 1; i++) {\n    area += (polygon[i].x - polygon[i + 1].x) * (polygon[i].y + polygon[i + 1].y)\n  }\n  // 最後分\n  area += (polygon[size - 1].x - polygon[0].x) * (polygon[size - 1].y + polygon[0].y)\n\n  area /= 2\n\n  // 負値を許さないなら絶対値\n  if (!allowNegative) {\n    area = Math.abs(area)\n  }\n\n  return area\n}\n\n/**\n * ベジェ曲線を直線で近似する(３次まで対応)\n * @param pointList 制御点リスト\n * @param size 分割数(1なら制御点両端のみ)\n * @return 座標リスト\n */\nexport function approximateBezier (pointList: IVec2[], size: number): IVec2[] {\n  const ret: IVec2[] = []\n  const unitT: number = 1 / size\n\n  if (pointList.length === 3) {\n    // ２次ベジェの場合\n    for (let i = 0; i <= size; i++) {\n      const t = unitT * i\n      const c0 = multi(pointList[0], (1 - t) * (1 - t))\n      const c1 = multi(pointList[1], 2 * t * (1 - t))\n      const c2 = multi(pointList[2], t * t)\n      ret.push({\n        x : c0.x + c1.x + c2.x,\n        y : c0.y + c1.y + c2.y\n      })\n    }\n  } else if (pointList.length === 4) {\n    // 3次ベジェの場合\n    for (let i = 0; i <= size; i++) {\n      const t = unitT * i\n      const c0 = multi(pointList[0], (1 - t) * (1 - t) * (1 - t))\n      const c1 = multi(pointList[1], 3 * t * (1 - t) * (1 - t))\n      const c2 = multi(pointList[2], 3 * t * t * (1 - t))\n      const c3 = multi(pointList[3], t * t * t)\n      ret.push({\n        x : c0.x + c1.x + c2.x + c3.x,\n        y : c0.y + c1.y + c2.y + c3.y\n      })\n    }\n  } else {\n    throw new Error('connot approximate')\n  }\n\n  return ret\n}\n\n/**\n * 円弧を直線で近似する\n * @param rx x軸半径\n * @param ry y軸半径\n * @param startRadian 開始ラジアン\n * @param endRadian 終了ラジアン\n * @param center 中心座標\n * @param radian 傾き\n * @param size 分割数\n * @return 座標リスト\n */\nexport function approximateArc (\n  rx: number,\n  ry: number,\n  startRadian: number,\n  endRadian: number,\n  center: IVec2,\n  radian: number,\n  size: number\n): IVec2[] {\n  const ret = []\n  const range = endRadian - startRadian\n  const unitT = range / size\n\n  for (let i = 0; i <= size; i++) {\n    const t = unitT * i + startRadian - radian\n    ret.push(add(rotate({\n      x : rx * Math.cos(t),\n      y : ry * Math.sin(t)\n    }, radian), center))\n  }\n\n  return ret\n}\n\n/**\n * ２点指定の円弧を直線で近似する\n * https://triple-underscore.github.io/SVG11/paths.html#PathDataEllipticalArcCommands\n * @method approximateArcWithPoint\n * @param rx x軸半径\n * @param ry y軸半径\n * @param startPoint 開始点\n * @param endPoint 終了点\n * @param largeArcFlag 円弧の大きい側を使うフラグ\n * @param sweepFlag 時計回り円弧を使うフラグ\n * @param radian 傾き\n * @param size 分割数\n * @return 座標リスト\n */\nexport function approximateArcWithPoint (\n  rx: number,\n  ry: number,\n  startPoint: IVec2,\n  endPoint: IVec2,\n  largeArcFlag: boolean,\n  sweepFlag: boolean,\n  radian: number,\n  size: number\n): IVec2[] {\n  // 範囲外の径の修正\n  // https://triple-underscore.github.io/SVG11/implnote.html#ArcImplementationNotes\n  // 径長ゼロを弾く\n  if (rx * ry === 0) return [startPoint, endPoint]\n\n  // 負の径長を訂正する\n  rx = Math.abs(rx)\n  ry = Math.abs(ry)\n\n  // 楕円中心取得\n  const centerInfo = getEllipseCenter(startPoint, endPoint, rx, ry, radian)\n  const centers = centerInfo.centers\n\n  // 径長を十分大きくする\n  rx *= centerInfo.radiusRate\n  ry *= centerInfo.radiusRate\n\n  let center = null\n\n  if ((largeArcFlag && sweepFlag) || (!largeArcFlag && !sweepFlag)) {\n    // 時計回り＆大きい側\n    // 反時計回り＆小さい側\n    // →始点終点中心が反時計回りになる\n    if (getLoopwise([startPoint, endPoint, centers[0]]) < 0) {\n      center = centers[0]\n    } else {\n      center = centers[1]\n    }\n  } else {\n    if (getLoopwise([startPoint, endPoint, centers[0]]) > 0) {\n      center = centers[0]\n    } else {\n      center = centers[1]\n    }\n  }\n\n  // 回り方に応じて始点と終点を設定\n  let startRadian = 0\n  let endRadian = 0\n  const r1 = getRadianOnArc(startPoint, rx, center, radian)\n  const r2 = getRadianOnArc(endPoint, rx, center, radian)\n  if (sweepFlag) {\n    if (r1 > r2) {\n      startRadian = r1 - Math.PI * 2\n      endRadian = r2\n    } else {\n      startRadian = r1\n      endRadian = r2\n    }\n  } else {\n    if (r1 > r2) {\n      startRadian = r1\n      endRadian = r2\n    } else {\n      startRadian = r1\n      endRadian = r2 - Math.PI * 2\n    }\n  }\n\n  return approximateArc(\n    rx,\n    ry,\n    startRadian,\n    endRadian,\n    center,\n    radian,\n    size\n  )\n}\n\n/**\n * 円弧上の点の角度を求める\n * @param a 円弧上の点\n * @param rx x径長\n * @param center 中心座標\n * @param radian 傾き\n * @return ラジアン(0 <= t <= 2 * Math.PI)\n */\nfunction getRadianOnArc (\n  a: IVec2,\n  rx: number,\n  center: IVec2,\n  radian: number\n): number {\n  // 回転打ち消し\n  a = rotate(a, -radian, center)\n  let ret = Math.acos((a.x - center.x) / rx)\n\n  // y座標の位置をみて絞り込み\n  if (a.y - center.y < 0) {\n    ret = -ret + Math.PI * 2\n  }\n\n  // 回転戻す\n  ret += radian\n  ret %= Math.PI * 2\n\n  return ret\n}\n\n/**\n * ２点を通る楕円の中心を求める\n * @param a 点a\n * @param b 点b\n * @param rx x軸半径\n * @param ry y軸半径\n * @param radian 傾き\n * @return 解となる２点\n * @return { centers: 解となる２点, radiusRate: 半径補正係数 }\n */\nexport function getEllipseCenter (\n  a: IVec2,\n  b: IVec2,\n  rx: number,\n  ry: number,\n  radian: number\n): { centers: IVec2[], radiusRate: number } {\n  // 回転を打ち消す\n  a = rotate(a, -radian)\n  b = rotate(b, -radian)\n\n  // 媒介変数を利用して円の中心問題にする\n  const A = {\n    x : a.x / rx,\n    y : a.y / ry\n  }\n  const B = {\n    x : b.x / rx,\n    y : b.y / ry\n  }\n\n  // 円の中心取得\n  const centerInfo = getCircleCenter(A, B, 1)\n  const C = centerInfo.centers\n\n  // 楕円に戻す\n  let ans1 = {\n    x : C[0].x * rx,\n    y : C[0].y * ry\n  }\n  let ans2 = {\n    x : C[1].x * rx,\n    y : C[1].y * ry\n  }\n\n  // 回転を戻す\n  ans1 = rotate(ans1, radian)\n  ans2 = rotate(ans2, radian)\n\n  return {\n    centers: [ans1, ans2],\n    radiusRate: centerInfo.radiusRate\n  }\n}\n\n/**\n * ２点を通る円の中心を求める\n * @param a 点a\n * @param b 点b\n * @param radius 半径\n * @return { centers: 解となる２点, radiusRate: 半径補正係数 }\n */\nexport function getCircleCenter (\n  a: IVec2,\n  b: IVec2,\n  radius: number\n): { centers: IVec2[], radiusRate: number } {\n  const u1 = (a.x + b.x) / 2\n  const u2 = (a.x - b.x) / 2\n  const v1 = (a.y + b.y) / 2\n  const v2 = (a.y - b.y) / 2\n  const L = Math.sqrt(u2 * u2 + v2 * v2)\n  const t2 = Math.pow((radius / L), 2) - 1\n\n  // 2点が直径以上に離れている => 2点を直径とみなす\n  if (t2 < 0) {\n    const center = getCenter(a, b)\n    return {\n      centers: [center, center],\n      radiusRate: L / radius\n    }\n  }\n\n  const t = Math.sqrt(t2)\n  const ans1 = {\n    x : u1 + v2 * t,\n    y : v1 - u2 * t\n  }\n  const ans2 = {\n    x : u1 - v2 * t,\n    y : v1 + u2 * t\n  }\n\n  return {\n    centers: [ans1, ans2],\n    radiusRate: 1\n  }\n}\n\n/**\n * 2次元アフィン変換を行う\n * paramsには以下の行列をa b c d e fの順で指定する\n * a c e\n * b d f\n * @param points 変換前の座標リスト\n * @param params 行列成分\n * @return 座標リスト\n */\nexport function transform (points: IVec2[], params: number[]): IVec2[] {\n  const a = params[0]\n  const b = params[1]\n  const c = params[2]\n  const d = params[3]\n  const e = params[4]\n  const f = params[5]\n\n  return points.map((p) => ({\n    x : a * p.x + c * p.y + e,\n    y : b * p.x + d * p.y + f\n  }))\n}\n\n/**\n * 隣り合う同一点をオミットする\n * @method omitSamePoint\n * @param polygon ポリゴン\n * @return オミット後のポリゴン\n */\nexport function omitSamePoint (polygon: IVec2[]): IVec2[] {\n  let ret = polygon.concat()\n\n  // サイズ\n  const size = polygon.length\n  // 同一点探す\n  for (let i = 0; i < size; i++) {\n    const p1 = ret[i]\n    const p2 = ret[(i + 1) % size]\n    if (isSame(p1, p2)) {\n      // 同一\n      ret.splice(i, 1)\n      // 再帰\n      ret = omitSamePoint(ret)\n      break\n    }\n  }\n\n  return ret\n}\n","import * as geo from './geo'\n\nexport default {\n  geo\n}\n"]}